Loading configuration file: /home/roki/GIT/FPTaylor/./default.cfg
FPTaylor, version 0.9.3+dev

Loading: /home/roki/GIT/FPTaylor/benchmarks/probability/ClassIDs0.txt
Processing: classids0

*************************************
Taylor form for: rnd32((rnd32((rnd32((rnd32((rnd32((rnd32((-(rnd32((42536536409818343/50000000000000000))))) * rnd32(atts0))) + rnd32((rnd32((-(rnd32((49332008458184251/50000000000000000))))) * rnd32(atts1))))) + rnd32((rnd32((6904758742908891/5000000000000000)) * rnd32(atts2))))) + rnd32((rnd32((18653450939330991/10000000000000000)) * rnd32(atts3))))) - rnd32((rnd32((rnd32((rnd32((rnd32((18424469636214999/100000000000000000)) * rnd32(atts0))) + rnd32((rnd32((45123431334216657/100000000000000000)) * rnd32(atts1))))) + rnd32((rnd32((-(rnd32((80794264540764449/100000000000000000))))) * rnd32(atts2))))) + rnd32((rnd32((-(rnd32((5633890816800119/12500000000000000))))) * rnd32(atts3)))))))

Conservative bound: [-23.198006, 24.733415]

Simplified rounding: rnd[float32,ne,1.00,-24,0]((rnd[float32,ne,1.00,-24,0]((rnd[float32,ne,1.00,-24,0]((rnd[float32,ne,1.00,-24,0]((rnd32(((-(rnd32((42536536409818343/50000000000000000)))) * rnd32(atts0))) + rnd32(((-(rnd32((49332008458184251/50000000000000000)))) * rnd32(atts1))))) + rnd32((rnd32((6904758742908891/5000000000000000)) * rnd32(atts2))))) + rnd32((rnd32((18653450939330991/10000000000000000)) * rnd32(atts3))))) - rnd[float32,ne,1.00,-24,0]((rnd[float32,ne,1.00,-24,0]((rnd[float32,ne,1.00,-24,0]((rnd32((rnd32((18424469636214999/100000000000000000)) * rnd32(atts0))) + rnd32((rnd32((45123431334216657/100000000000000000)) * rnd32(atts1))))) + rnd32(((-(rnd32((80794264540764449/100000000000000000)))) * rnd32(atts2))))) + rnd32(((-(rnd32((5633890816800119/12500000000000000)))) * rnd32(atts3)))))))
Building Taylor forms...
Simplifying Taylor forms...
success
v0 = ((((((-((42536536409818343/50000000000000000))) * atts0) + ((-((49332008458184251/50000000000000000))) * atts1)) + ((6904758742908891/5000000000000000) * atts2)) + ((18653450939330991/10000000000000000) * atts3)) - (((((18424469636214999/100000000000000000) * atts0) + ((45123431334216657/100000000000000000) * atts1)) + ((-((80794264540764449/100000000000000000))) * atts2)) + ((-((5633890816800119/12500000000000000))) * atts3)))
-1 (76): exp = -24: (601565082063531/1180591620717411303424)
1 (1): exp = -24: ((((((((atts0 * (-((140981855183/762939453125)))) + (atts1 * (-((177258058881/762939453125))))) + (atts2 * (-34861116558/152587890625))) + (atts3 * (-67832047554/152587890625))) + (-((atts0 * (51667941747/762939453125))))) + (-((atts1 * (63405167317/1525878906250))))) + (-((atts2 * (-((211803786972/762939453125))))))) + (-((atts3 * (-((-377945309413/1525878906250)))))))
2 (2): exp = -24: (((-((42536536409818343/50000000000000000))) * floor_power2(atts0)) + (-(((18424469636214999/100000000000000000) * floor_power2(atts0)))))
3 (4): exp = -24: floor_power2((((-((42536536409818343/50000000000000000))) * atts0) + interval(-5.04787895006761066363e-07, 5.04787895006761066363e-07)))
4 (7): exp = -24: (((-((49332008458184251/50000000000000000))) * floor_power2(atts1)) + (-(((45123431334216657/100000000000000000) * floor_power2(atts1)))))
5 (9): exp = -24: floor_power2((((-((49332008458184251/50000000000000000))) * atts1) + interval(-3.04474779768610346299e-07, 3.04474779768610346299e-07)))
6 (11): exp = -24: floor_power2(((((-((42536536409818343/50000000000000000))) * atts0) + ((-((49332008458184251/50000000000000000))) * atts1)) + interval(-1.28609983297849678324e-06, 1.28609983297849678324e-06)))
7 (14): exp = -24: (((6904758742908891/5000000000000000) * floor_power2(atts2)) + (-(((-((80794264540764449/100000000000000000))) * floor_power2(atts2)))))
8 (16): exp = -24: floor_power2((((6904758742908891/5000000000000000) * atts2) + interval(-7.94665350457448059086e-07, 7.94665350457448059086e-07)))
9 (18): exp = -24: floor_power2((((((-((42536536409818343/50000000000000000))) * atts0) + ((-((49332008458184251/50000000000000000))) * atts1)) + ((6904758742908891/5000000000000000) * atts2)) + interval(-3.03443949984219590112e-06, 3.03443949984219590112e-06)))
10 (21): exp = -24: (((18653450939330991/10000000000000000) * floor_power2(atts3)) + (-(((-((5633890816800119/12500000000000000))) * floor_power2(atts3)))))
11 (23): exp = -24: floor_power2((((18653450939330991/10000000000000000) * atts3) + interval(-3.15105594088710315451e-07, 3.15105594088710315451e-07)))
12 (25): exp = -24: floor_power2(((((((-((42536536409818343/50000000000000000))) * atts0) + ((-((49332008458184251/50000000000000000))) * atts1)) + ((6904758742908891/5000000000000000) * atts2)) + ((18653450939330991/10000000000000000) * atts3)) + interval(-4.06480083123559435184e-06, 4.06480083123559435184e-06)))
13 (30): exp = -24: (-(floor_power2((((18424469636214999/100000000000000000) * atts0) + interval(-1.24183740892965458142e-07, 1.24183740892965458142e-07)))))
14 (35): exp = -24: (-(floor_power2((((45123431334216657/100000000000000000) * atts1) + interval(-1.19966466161016781056e-07, 1.19966466161016781056e-07)))))
15 (37): exp = -24: (-(floor_power2(((((18424469636214999/100000000000000000) * atts0) + ((45123431334216657/100000000000000000) * atts1)) + interval(-4.22964141380154220077e-07, 4.22964141380154220077e-07)))))
16 (42): exp = -24: (-(floor_power2((((-((80794264540764449/100000000000000000))) * atts2) + interval(-5.50728791489477381573e-07, 5.50728791489477381573e-07)))))
17 (44): exp = -24: (-(floor_power2((((((18424469636214999/100000000000000000) * atts0) + ((45123431334216657/100000000000000000) * atts1)) + ((-((80794264540764449/100000000000000000))) * atts2)) + interval(-1.56973938062353875162e-06, 1.56973938062353875162e-06)))))
18 (49): exp = -24: (-(floor_power2((((-((5633890816800119/12500000000000000))) * atts3) + interval(-1.05401181765446627986e-07, 1.05401181765446627986e-07)))))
19 (51): exp = -24: (-(floor_power2(((((((18424469636214999/100000000000000000) * atts0) + ((45123431334216657/100000000000000000) * atts1)) + ((-((80794264540764449/100000000000000000))) * atts2)) + ((-((5633890816800119/12500000000000000))) * atts3)) + interval(-1.97316378626593842520e-06, 1.97316378626593842520e-06)))))
20 (53): exp = -24: floor_power2((((((((-((42536536409818343/50000000000000000))) * atts0) + ((-((49332008458184251/50000000000000000))) * atts1)) + ((6904758742908891/5000000000000000) * atts2)) + ((18653450939330991/10000000000000000) * atts3)) - (((((18424469636214999/100000000000000000) * atts0) + ((45123431334216657/100000000000000000) * atts1)) + ((-((80794264540764449/100000000000000000))) * atts2)) + ((-((5633890816800119/12500000000000000))) * atts3))) + interval(-7.46847609211091116517e-06, 7.46847609211091116517e-06)))

Corresponding original subexpressions:
1: rnd32(0)
2: rnd32(atts0)
3: rnd32(((-(rnd32((42536536409818343/50000000000000000)))) * rnd32(atts0)))
4: rnd32(atts1)
5: rnd32(((-(rnd32((49332008458184251/50000000000000000)))) * rnd32(atts1)))
6: rnd[float32,ne,1.00,-24,0]((rnd32(((-(rnd32((42536536409818343/50000000000000000)))) * rnd32(atts0))) + rnd32(((-(rnd32((49332008458184251/50000000000000000)))) * rnd32(atts1)))))
7: rnd32(atts2)
8: rnd32((rnd32((6904758742908891/5000000000000000)) * rnd32(atts2)))
9: rnd[float32,ne,1.00,-24,0]((rnd[float32,ne,1.00,-24,0]((rnd32(((-(rnd32((42536536409818343/50000000000000000)))) * rnd32(atts0))) + rnd32(((-(rnd32((49332008458184251/50000000000000000)))) * rnd32(atts1))))) + rnd32((rnd32((6904758742908891/5000000000000000)) * rnd32(atts2)))))
10: rnd32(atts3)
11: rnd32((rnd32((18653450939330991/10000000000000000)) * rnd32(atts3)))
12: rnd[float32,ne,1.00,-24,0]((rnd[float32,ne,1.00,-24,0]((rnd[float32,ne,1.00,-24,0]((rnd32(((-(rnd32((42536536409818343/50000000000000000)))) * rnd32(atts0))) + rnd32(((-(rnd32((49332008458184251/50000000000000000)))) * rnd32(atts1))))) + rnd32((rnd32((6904758742908891/5000000000000000)) * rnd32(atts2))))) + rnd32((rnd32((18653450939330991/10000000000000000)) * rnd32(atts3)))))
13: rnd32((rnd32((18424469636214999/100000000000000000)) * rnd32(atts0)))
14: rnd32((rnd32((45123431334216657/100000000000000000)) * rnd32(atts1)))
15: rnd[float32,ne,1.00,-24,0]((rnd32((rnd32((18424469636214999/100000000000000000)) * rnd32(atts0))) + rnd32((rnd32((45123431334216657/100000000000000000)) * rnd32(atts1)))))
16: rnd32(((-(rnd32((80794264540764449/100000000000000000)))) * rnd32(atts2)))
17: rnd[float32,ne,1.00,-24,0]((rnd[float32,ne,1.00,-24,0]((rnd32((rnd32((18424469636214999/100000000000000000)) * rnd32(atts0))) + rnd32((rnd32((45123431334216657/100000000000000000)) * rnd32(atts1))))) + rnd32(((-(rnd32((80794264540764449/100000000000000000)))) * rnd32(atts2)))))
18: rnd32(((-(rnd32((5633890816800119/12500000000000000)))) * rnd32(atts3)))
19: rnd[float32,ne,1.00,-24,0]((rnd[float32,ne,1.00,-24,0]((rnd[float32,ne,1.00,-24,0]((rnd32((rnd32((18424469636214999/100000000000000000)) * rnd32(atts0))) + rnd32((rnd32((45123431334216657/100000000000000000)) * rnd32(atts1))))) + rnd32(((-(rnd32((80794264540764449/100000000000000000)))) * rnd32(atts2))))) + rnd32(((-(rnd32((5633890816800119/12500000000000000)))) * rnd32(atts3)))))
20: rnd[float32,ne,1.00,-24,0]((rnd[float32,ne,1.00,-24,0]((rnd[float32,ne,1.00,-24,0]((rnd[float32,ne,1.00,-24,0]((rnd32(((-(rnd32((42536536409818343/50000000000000000)))) * rnd32(atts0))) + rnd32(((-(rnd32((49332008458184251/50000000000000000)))) * rnd32(atts1))))) + rnd32((rnd32((6904758742908891/5000000000000000)) * rnd32(atts2))))) + rnd32((rnd32((18653450939330991/10000000000000000)) * rnd32(atts3))))) - rnd[float32,ne,1.00,-24,0]((rnd[float32,ne,1.00,-24,0]((rnd[float32,ne,1.00,-24,0]((rnd32((rnd32((18424469636214999/100000000000000000)) * rnd32(atts0))) + rnd32((rnd32((45123431334216657/100000000000000000)) * rnd32(atts1))))) + rnd32(((-(rnd32((80794264540764449/100000000000000000)))) * rnd32(atts2))))) + rnd32(((-(rnd32((5633890816800119/12500000000000000)))) * rnd32(atts3)))))))

bounds: [-2.319800e+01, 2.473340e+01]

Computing absolute errors
-1: exp = -24: 5.095454e-07 (low = 5.095454e-07, subopt = 0.0%)

Solving the exact optimization problem
exact bound (exp = -24): 1.149389e+02 (low = 1.147838e+02, subopt = 0.1%)
total2: 3.037128e-14 (low = 3.037128e-14, subopt = 0.0%)
exact total: 6.850891e-06 (low = 6.841649e-06, subopt = 0.1%)

Computing relative errors
**WARNING**: 
Cannot compute the relative error: values of the function are close to zero

**WARNING**: 0.00000000000000000000000000000000000000000000000000100000000000000000761622370578234285759930916419271389895138472837095389481447900651438935953211746691245522253373491061798089161657965284746296674711629748344421386718750000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000

Elapsed time: 0.42857
*************************************

-------------------------------------------------------------------------------
Problem: classids0

Optimization lower bounds for error models:
The absolute error model (exact): 6.841649e-06 (suboptimality = 0.1%)

Bounds (without rounding): [-2.319800e+01, 2.473340e+01]
Bounds (floating-point): [-2.31980032317030513411e+01, 2.47334100508209679958e+01]

Absolute error (exact): 6.850891e-06

Elapsed time: 0.43


