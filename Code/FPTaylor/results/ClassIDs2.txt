Loading configuration file: /home/roki/GIT/FPTaylor/./default.cfg
FPTaylor, version 0.9.3+dev

Loading: /home/roki/GIT/FPTaylor/benchmarks/probability/ClassIDs2.txt
Processing: classids1

*************************************
Taylor form for: rnd32((rnd32((rnd32((rnd32((rnd32((rnd32((10420050612805791/200000000000000000)) * rnd32(atts0))) + rnd32((rnd32((-(rnd32((1117792738975983/1250000000000000))))) * rnd32(atts1))))) + rnd32((rnd32((40478255170032273/100000000000000000)) * rnd32(atts2))))) + rnd32((rnd32((-(rnd32((23443672549426059/25000000000000000))))) * rnd32(atts3))))) - rnd32((rnd32((rnd32((rnd32((rnd32((-(rnd32((42536536409818343/50000000000000000))))) * rnd32(atts0))) + rnd32((rnd32((-(rnd32((49332008458184251/50000000000000000))))) * rnd32(atts1))))) + rnd32((rnd32((6904758742908891/5000000000000000)) * rnd32(atts2))))) + rnd32((rnd32((18653450939330991/10000000000000000)) * rnd32(atts3)))))))

Conservative bound: [-24.712633, 21.330159]

Simplified rounding: rnd[float32,ne,1.00,-24,0]((rnd[float32,ne,1.00,-24,0]((rnd[float32,ne,1.00,-24,0]((rnd[float32,ne,1.00,-24,0]((rnd32((rnd32((10420050612805791/200000000000000000)) * rnd32(atts0))) + rnd32(((-(rnd32((1117792738975983/1250000000000000)))) * rnd32(atts1))))) + rnd32((rnd32((40478255170032273/100000000000000000)) * rnd32(atts2))))) + rnd32(((-(rnd32((23443672549426059/25000000000000000)))) * rnd32(atts3))))) - rnd[float32,ne,1.00,-24,0]((rnd[float32,ne,1.00,-24,0]((rnd[float32,ne,1.00,-24,0]((rnd32(((-(rnd32((42536536409818343/50000000000000000)))) * rnd32(atts0))) + rnd32(((-(rnd32((49332008458184251/50000000000000000)))) * rnd32(atts1))))) + rnd32((rnd32((6904758742908891/5000000000000000)) * rnd32(atts2))))) + rnd32((rnd32((18653450939330991/10000000000000000)) * rnd32(atts3)))))))
Building Taylor forms...
Simplifying Taylor forms...
success
v0 = ((((((10420050612805791/200000000000000000) * atts0) + ((-((1117792738975983/1250000000000000))) * atts1)) + ((40478255170032273/100000000000000000) * atts2)) + ((-((23443672549426059/25000000000000000))) * atts3)) - (((((-((42536536409818343/50000000000000000))) * atts0) + ((-((49332008458184251/50000000000000000))) * atts1)) + ((6904758742908891/5000000000000000) * atts2)) + ((18653450939330991/10000000000000000) * atts3)))
-1 (76): exp = -24: (2300038778341355/4722366482869645213696)
1 (1): exp = -24: ((((((((atts0 * (144163520609/12207031250000)) + (atts1 * (-((27469688184/152587890625))))) + (atts2 * (-300739316237/1525878906250))) + (atts3 * (-((250091298458/762939453125))))) + (-((atts0 * (-((140981855183/762939453125))))))) + (-((atts1 * (-((177258058881/762939453125))))))) + (-((atts2 * (-34861116558/152587890625))))) + (-((atts3 * (-67832047554/152587890625)))))
2 (2): exp = -24: (((10420050612805791/200000000000000000) * floor_power2(atts0)) + (-(((-((42536536409818343/50000000000000000))) * floor_power2(atts0)))))
3 (4): exp = -24: floor_power2((((10420050612805791/200000000000000000) * atts0) + interval(-3.11786479126347762823e-08, 3.11786479126347762823e-08)))
4 (7): exp = -24: (((-((1117792738975983/1250000000000000))) * floor_power2(atts1)) + (-(((-((49332008458184251/50000000000000000))) * floor_power2(atts1)))))
5 (9): exp = -24: floor_power2((((-((1117792738975983/1250000000000000))) * atts1) + interval(-2.66853782538047231392e-07, 2.66853782538047231392e-07)))
6 (11): exp = -24: floor_power2(((((10420050612805791/200000000000000000) * atts0) + ((-((1117792738975983/1250000000000000))) * atts1)) + interval(-5.51352170746092514649e-07, 5.51352170746092514649e-07)))
7 (14): exp = -24: (((40478255170032273/100000000000000000) * floor_power2(atts2)) + (-(((6904758742908891/5000000000000000) * floor_power2(atts2)))))
8 (16): exp = -24: floor_power2((((40478255170032273/100000000000000000) * atts2) + interval(-3.10491662649775878128e-07, 3.10491662649775878128e-07)))
9 (18): exp = -24: floor_power2((((((10420050612805791/200000000000000000) * atts0) + ((-((1117792738975983/1250000000000000))) * atts1)) + ((40478255170032273/100000000000000000) * atts2)) + interval(-1.33868099159899371041e-06, 1.33868099159899371041e-06)))
10 (21): exp = -24: (((-((23443672549426059/25000000000000000))) * floor_power2(atts3)) + (-(((18653450939330991/10000000000000000) * floor_power2(atts3)))))
11 (23): exp = -24: floor_power2((((-((23443672549426059/25000000000000000))) * atts3) + interval(-1.80172483714395461207e-07, 1.80172483714395461207e-07)))
12 (25): exp = -24: floor_power2(((((((10420050612805791/200000000000000000) * atts0) + ((-((1117792738975983/1250000000000000))) * atts1)) + ((40478255170032273/100000000000000000) * atts2)) + ((-((23443672549426059/25000000000000000))) * atts3)) + interval(-1.87648134396573310691e-06, 1.87648134396573310691e-06)))
13 (30): exp = -24: (-(floor_power2((((-((42536536409818343/50000000000000000))) * atts0) + interval(-5.04787895006761066363e-07, 5.04787895006761066363e-07)))))
14 (35): exp = -24: (-(floor_power2((((-((49332008458184251/50000000000000000))) * atts1) + interval(-3.04474779768610346299e-07, 3.04474779768610346299e-07)))))
15 (37): exp = -24: (-(floor_power2(((((-((42536536409818343/50000000000000000))) * atts0) + ((-((49332008458184251/50000000000000000))) * atts1)) + interval(-1.28609983297849678324e-06, 1.28609983297849678324e-06)))))
16 (42): exp = -24: (-(floor_power2((((6904758742908891/5000000000000000) * atts2) + interval(-7.94665350457448059086e-07, 7.94665350457448059086e-07)))))
17 (44): exp = -24: (-(floor_power2((((((-((42536536409818343/50000000000000000))) * atts0) + ((-((49332008458184251/50000000000000000))) * atts1)) + ((6904758742908891/5000000000000000) * atts2)) + interval(-3.03443949984219590112e-06, 3.03443949984219590112e-06)))))
18 (49): exp = -24: (-(floor_power2((((18653450939330991/10000000000000000) * atts3) + interval(-3.15105594088710315451e-07, 3.15105594088710315451e-07)))))
19 (51): exp = -24: (-(floor_power2(((((((-((42536536409818343/50000000000000000))) * atts0) + ((-((49332008458184251/50000000000000000))) * atts1)) + ((6904758742908891/5000000000000000) * atts2)) + ((18653450939330991/10000000000000000) * atts3)) + interval(-4.06480083123559435184e-06, 4.06480083123559435184e-06)))))
20 (53): exp = -24: floor_power2((((((((10420050612805791/200000000000000000) * atts0) + ((-((1117792738975983/1250000000000000))) * atts1)) + ((40478255170032273/100000000000000000) * atts2)) + ((-((23443672549426059/25000000000000000))) * atts3)) - (((((-((42536536409818343/50000000000000000))) * atts0) + ((-((49332008458184251/50000000000000000))) * atts1)) + ((6904758742908891/5000000000000000) * atts2)) + ((18653450939330991/10000000000000000) * atts3))) + interval(-7.37179364981070923502e-06, 7.37179364981070923502e-06)))

Corresponding original subexpressions:
1: rnd32(0)
2: rnd32(atts0)
3: rnd32((rnd32((10420050612805791/200000000000000000)) * rnd32(atts0)))
4: rnd32(atts1)
5: rnd32(((-(rnd32((1117792738975983/1250000000000000)))) * rnd32(atts1)))
6: rnd[float32,ne,1.00,-24,0]((rnd32((rnd32((10420050612805791/200000000000000000)) * rnd32(atts0))) + rnd32(((-(rnd32((1117792738975983/1250000000000000)))) * rnd32(atts1)))))
7: rnd32(atts2)
8: rnd32((rnd32((40478255170032273/100000000000000000)) * rnd32(atts2)))
9: rnd[float32,ne,1.00,-24,0]((rnd[float32,ne,1.00,-24,0]((rnd32((rnd32((10420050612805791/200000000000000000)) * rnd32(atts0))) + rnd32(((-(rnd32((1117792738975983/1250000000000000)))) * rnd32(atts1))))) + rnd32((rnd32((40478255170032273/100000000000000000)) * rnd32(atts2)))))
10: rnd32(atts3)
11: rnd32(((-(rnd32((23443672549426059/25000000000000000)))) * rnd32(atts3)))
12: rnd[float32,ne,1.00,-24,0]((rnd[float32,ne,1.00,-24,0]((rnd[float32,ne,1.00,-24,0]((rnd32((rnd32((10420050612805791/200000000000000000)) * rnd32(atts0))) + rnd32(((-(rnd32((1117792738975983/1250000000000000)))) * rnd32(atts1))))) + rnd32((rnd32((40478255170032273/100000000000000000)) * rnd32(atts2))))) + rnd32(((-(rnd32((23443672549426059/25000000000000000)))) * rnd32(atts3)))))
13: rnd32(((-(rnd32((42536536409818343/50000000000000000)))) * rnd32(atts0)))
14: rnd32(((-(rnd32((49332008458184251/50000000000000000)))) * rnd32(atts1)))
15: rnd[float32,ne,1.00,-24,0]((rnd32(((-(rnd32((42536536409818343/50000000000000000)))) * rnd32(atts0))) + rnd32(((-(rnd32((49332008458184251/50000000000000000)))) * rnd32(atts1)))))
16: rnd32((rnd32((6904758742908891/5000000000000000)) * rnd32(atts2)))
17: rnd[float32,ne,1.00,-24,0]((rnd[float32,ne,1.00,-24,0]((rnd32(((-(rnd32((42536536409818343/50000000000000000)))) * rnd32(atts0))) + rnd32(((-(rnd32((49332008458184251/50000000000000000)))) * rnd32(atts1))))) + rnd32((rnd32((6904758742908891/5000000000000000)) * rnd32(atts2)))))
18: rnd32((rnd32((18653450939330991/10000000000000000)) * rnd32(atts3)))
19: rnd[float32,ne,1.00,-24,0]((rnd[float32,ne,1.00,-24,0]((rnd[float32,ne,1.00,-24,0]((rnd32(((-(rnd32((42536536409818343/50000000000000000)))) * rnd32(atts0))) + rnd32(((-(rnd32((49332008458184251/50000000000000000)))) * rnd32(atts1))))) + rnd32((rnd32((6904758742908891/5000000000000000)) * rnd32(atts2))))) + rnd32((rnd32((18653450939330991/10000000000000000)) * rnd32(atts3)))))
20: rnd[float32,ne,1.00,-24,0]((rnd[float32,ne,1.00,-24,0]((rnd[float32,ne,1.00,-24,0]((rnd[float32,ne,1.00,-24,0]((rnd32((rnd32((10420050612805791/200000000000000000)) * rnd32(atts0))) + rnd32(((-(rnd32((1117792738975983/1250000000000000)))) * rnd32(atts1))))) + rnd32((rnd32((40478255170032273/100000000000000000)) * rnd32(atts2))))) + rnd32(((-(rnd32((23443672549426059/25000000000000000)))) * rnd32(atts3))))) - rnd[float32,ne,1.00,-24,0]((rnd[float32,ne,1.00,-24,0]((rnd[float32,ne,1.00,-24,0]((rnd32(((-(rnd32((42536536409818343/50000000000000000)))) * rnd32(atts0))) + rnd32(((-(rnd32((49332008458184251/50000000000000000)))) * rnd32(atts1))))) + rnd32((rnd32((6904758742908891/5000000000000000)) * rnd32(atts2))))) + rnd32((rnd32((18653450939330991/10000000000000000)) * rnd32(atts3)))))))

bounds: [-1.679329e+01, 1.341082e+01]

Computing absolute errors
-1: exp = -24: 4.870522e-07 (low = 4.870522e-07, subopt = 0.0%)

Solving the exact optimization problem
exact bound (exp = -24): 8.647453e+01 (low = 8.637985e+01, subopt = 0.1%)
total2: 2.903057e-14 (low = 2.903057e-14, subopt = 0.0%)
exact total: 5.154284e-06 (low = 5.148640e-06, subopt = 0.1%)

Computing relative errors
**WARNING**: 
Cannot compute the relative error: values of the function are close to zero

**WARNING**: 0.00000000000000000000000000000000000000000000000000100000000000000000761622370578234285759930916419271389895138472837095389481447900651438935953211746691245522253373491061798089161657965284746296674711629748344421386718750000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000

Elapsed time: 0.53923
*************************************

-------------------------------------------------------------------------------
Problem: classids1

Optimization lower bounds for error models:
The absolute error model (exact): 5.148640e-06 (suboptimality = 0.1%)

Bounds (without rounding): [-1.679329e+01, 1.341082e+01]
Bounds (floating-point): [-1.67932948124692167369e+01, 1.34108218796558080754e+01]

Absolute error (exact): 5.154284e-06

Elapsed time: 0.54


