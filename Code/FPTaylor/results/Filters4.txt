Loading configuration file: /home/roki/GIT/FPTaylor/./default.cfg
FPTaylor, version 0.9.3+dev

Loading: /home/roki/GIT/FPTaylor/benchmarks/probability/Filters4.txt
Processing: filter4

*************************************
Taylor form for: rnd32((rnd32((rnd32((rnd32((rnd32((rnd32((7/10)) * rnd32(x3))) - rnd32((rnd32((13/10)) * rnd32(x2))))) + rnd32((rnd32((11/10)) * rnd32(x1))))) + rnd32((rnd32((7/5)) * rnd32((rnd32((rnd32((rnd32((rnd32((7/10)) * rnd32(x2))) - rnd32((rnd32((13/10)) * rnd32(x1))))) + rnd32((rnd32((11/10)) * rnd32(x0))))) + rnd32((rnd32((rnd32((7/5)) * rnd32((rnd32((rnd32((rnd32((7/10)) * rnd32(x1))) - rnd32((rnd32((13/10)) * rnd32(x0))))) + rnd32((rnd32((7/5)) * rnd32((rnd32((7/10)) * rnd32(x0))))))))) - rnd32((rnd32((7/10)) * rnd32((rnd32((7/10)) * rnd32(x0))))))))))))) - rnd32((rnd32((7/10)) * rnd32((rnd32((rnd32((rnd32((7/10)) * rnd32(x1))) - rnd32((rnd32((13/10)) * rnd32(x0))))) + rnd32((rnd32((7/5)) * rnd32((rnd32((7/10)) * rnd32(x0)))))))))))

Conservative bound: [-32.105620, 32.105620]

Simplified rounding: rnd[float32,ne,1.00,-24,0]((rnd[float32,ne,1.00,-24,0]((rnd[float32,ne,1.00,-24,0]((rnd[float32,ne,1.00,-24,0]((rnd32((rnd32((7/10)) * rnd32(x3))) - rnd32((rnd32((13/10)) * rnd32(x2))))) + rnd32((rnd32((11/10)) * rnd32(x1))))) + rnd32((rnd32((7/5)) * rnd[float32,ne,1.00,-24,0]((rnd[float32,ne,1.00,-24,0]((rnd[float32,ne,1.00,-24,0]((rnd32((rnd32((7/10)) * rnd32(x2))) - rnd32((rnd32((13/10)) * rnd32(x1))))) + rnd32((rnd32((11/10)) * rnd32(x0))))) + rnd[float32,ne,1.00,-24,0]((rnd32((rnd32((7/5)) * rnd[float32,ne,1.00,-24,0]((rnd[float32,ne,1.00,-24,0]((rnd32((rnd32((7/10)) * rnd32(x1))) - rnd32((rnd32((13/10)) * rnd32(x0))))) + rnd32((rnd32((7/5)) * rnd32((rnd32((7/10)) * rnd32(x0))))))))) - rnd32((rnd32((7/10)) * rnd32((rnd32((7/10)) * rnd32(x0))))))))))))) - rnd32((rnd32((7/10)) * rnd[float32,ne,1.00,-24,0]((rnd[float32,ne,1.00,-24,0]((rnd32((rnd32((7/10)) * rnd32(x1))) - rnd32((rnd32((13/10)) * rnd32(x0))))) + rnd32((rnd32((7/5)) * rnd32((rnd32((7/10)) * rnd32(x0)))))))))))
Building Taylor forms...
Simplifying Taylor forms...
success
v0 = ((((((7/10) * x3) - ((13/10) * x2)) + ((11/10) * x1)) + ((7/5) * (((((7/10) * x2) - ((13/10) * x1)) + ((11/10) * x0)) + (((7/5) * ((((7/10) * x1) - ((13/10) * x0)) + ((7/5) * ((7/10) * x0)))) - ((7/10) * ((7/10) * x0)))))) - ((7/10) * ((((7/10) * x1) - ((13/10) * x0)) + ((7/5) * ((7/10) * x0)))))
-1 (162): exp = -24: (7675372313415537/2361183241434822606848)
1 (1): exp = -24: (((((((((((((((((((x3 * (1/5)) + (-((x2 * (4/5))))) + (x1 * (-2/5))) + ((7/5) * (x2 * (1/5)))) + ((7/5) * (-((x1 * (4/5)))))) + ((7/5) * (x0 * (-2/5)))) + ((7/5) * ((7/5) * (x1 * (1/5))))) + ((7/5) * ((7/5) * (-((x0 * (4/5))))))) + ((7/5) * ((7/5) * ((7/5) * (x0 * (1/5)))))) + ((7/5) * ((7/5) * (((7/10) * x0) * (2/5))))) + ((7/5) * (((((7/10) * x1) - ((13/10) * x0)) + ((7/5) * ((7/10) * x0))) * (2/5)))) + ((7/5) * (-(((7/10) * (x0 * (1/5))))))) + ((7/5) * (-((((7/10) * x0) * (1/5)))))) + ((((((7/10) * x2) - ((13/10) * x1)) + ((11/10) * x0)) + (((7/5) * ((((7/10) * x1) - ((13/10) * x0)) + ((7/5) * ((7/10) * x0)))) - ((7/10) * ((7/10) * x0)))) * (2/5))) + (-(((7/10) * (x1 * (1/5)))))) + (-(((7/10) * (-((x0 * (4/5)))))))) + (-(((7/10) * ((7/5) * (x0 * (1/5))))))) + (-(((7/10) * (((7/10) * x0) * (2/5)))))) + (-((((((7/10) * x1) - ((13/10) * x0)) + ((7/5) * ((7/10) * x0))) * (1/5)))))
2 (2): exp = -24: ((7/10) * floor_power2(x3))
3 (4): exp = -24: floor_power2((((7/10) * x3) + interval(-6.55651099634724391420e-08, 6.55651099634724391420e-08)))
4 (7): exp = -24: ((-(((13/10) * floor_power2(x2)))) + ((7/5) * ((7/10) * floor_power2(x2))))
5 (9): exp = -24: (-(floor_power2((((13/10) * x2) + interval(-1.72853472690803766128e-07, 1.72853472690803766128e-07)))))
6 (11): exp = -24: floor_power2(((((7/10) * x3) - ((13/10) * x2)) + interval(-4.17232516980448159680e-07, 4.17232516980448159680e-07)))
7 (14): exp = -24: (((((11/10) * floor_power2(x1)) + ((7/5) * (-(((13/10) * floor_power2(x1)))))) + ((7/5) * ((7/5) * ((7/10) * floor_power2(x1))))) + (-(((7/10) * ((7/10) * floor_power2(x1))))))
8 (16): exp = -24: floor_power2((((11/10) * x1) + interval(-1.13248826494327674902e-07, 1.13248826494327674902e-07)))
9 (18): exp = -24: floor_power2((((((7/10) * x3) - ((13/10) * x2)) + ((11/10) * x1)) + interval(-8.88109212127119822810e-07, 8.88109212127119822810e-07)))
10 (24): exp = -24: ((7/5) * floor_power2((((7/10) * x2) + interval(-6.55651099634724391420e-08, 6.55651099634724391420e-08))))
11 (29): exp = -24: ((7/5) * (-(floor_power2((((13/10) * x1) + interval(-1.72853472690803766128e-07, 1.72853472690803766128e-07))))))
12 (31): exp = -24: ((7/5) * floor_power2(((((7/10) * x2) - ((13/10) * x1)) + interval(-4.17232516980448159680e-07, 4.17232516980448159680e-07))))
13 (34): exp = -24: (((((((7/5) * ((11/10) * floor_power2(x0))) + ((7/5) * ((7/5) * (-(((13/10) * floor_power2(x0))))))) + ((7/5) * ((7/5) * ((7/5) * ((7/10) * floor_power2(x0)))))) + ((7/5) * (-(((7/10) * ((7/10) * floor_power2(x0))))))) + (-(((7/10) * (-(((13/10) * floor_power2(x0)))))))) + (-(((7/10) * ((7/5) * ((7/10) * floor_power2(x0)))))))
14 (36): exp = -24: ((7/5) * floor_power2((((11/10) * x0) + interval(-1.13248826494327674902e-07, 1.13248826494327674902e-07))))
15 (38): exp = -24: ((7/5) * floor_power2((((((7/10) * x2) - ((13/10) * x1)) + ((11/10) * x0)) + interval(-8.88109212127119822810e-07, 8.88109212127119822810e-07))))
16 (44): exp = -24: (((7/5) * ((7/5) * floor_power2((((7/10) * x1) + interval(-6.55651099634724391420e-08, 6.55651099634724391420e-08))))) + (-(((7/10) * floor_power2((((7/10) * x1) + interval(-6.55651099634724391420e-08, 6.55651099634724391420e-08)))))))
17 (49): exp = -24: (((7/5) * ((7/5) * (-(floor_power2((((13/10) * x0) + interval(-1.72853472690803766128e-07, 1.72853472690803766128e-07))))))) + (-(((7/10) * (-(floor_power2((((13/10) * x0) + interval(-1.72853472690803766128e-07, 1.72853472690803766128e-07)))))))))
18 (51): exp = -24: (((7/5) * ((7/5) * floor_power2(((((7/10) * x1) - ((13/10) * x0)) + interval(-4.17232516980448159680e-07, 4.17232516980448159680e-07))))) + (-(((7/10) * floor_power2(((((7/10) * x1) - ((13/10) * x0)) + interval(-4.17232516980448159680e-07, 4.17232516980448159680e-07)))))))
19 (57): exp = -24: ((((7/5) * ((7/5) * ((7/5) * floor_power2((((7/10) * x0) + interval(-6.55651099634724391420e-08, 6.55651099634724391420e-08)))))) + ((7/5) * (-(((7/10) * floor_power2((((7/10) * x0) + interval(-6.55651099634724391420e-08, 6.55651099634724391420e-08)))))))) + (-(((7/10) * ((7/5) * floor_power2((((7/10) * x0) + interval(-6.55651099634724391420e-08, 6.55651099634724391420e-08))))))))
20 (60): exp = -24: (((7/5) * ((7/5) * floor_power2((((7/5) * ((7/10) * x0)) + interval(-2.08616260692906604107e-07, 2.08616260692906604107e-07))))) + (-(((7/10) * floor_power2((((7/5) * ((7/10) * x0)) + interval(-2.08616260692906604107e-07, 2.08616260692906604107e-07)))))))
21 (62): exp = -24: (((7/5) * ((7/5) * floor_power2((((((7/10) * x1) - ((13/10) * x0)) + ((7/5) * ((7/10) * x0))) + interval(-9.23872001550308232893e-07, 9.23872001550308232893e-07))))) + (-(((7/10) * floor_power2((((((7/10) * x1) - ((13/10) * x0)) + ((7/5) * ((7/10) * x0))) + interval(-9.23872001550308232893e-07, 9.23872001550308232893e-07)))))))
22 (65): exp = -24: ((7/5) * floor_power2((((7/5) * ((((7/10) * x1) - ((13/10) * x0)) + ((7/5) * ((7/10) * x0)))) + interval(-1.76930431376831756277e-06, 1.76930431376831756277e-06))))
23 (74): exp = -24: ((7/5) * (-(floor_power2((((7/10) * ((7/10) * x0)) + interval(-1.04308130346453302053e-07, 1.04308130346453302053e-07))))))
24 (76): exp = -24: ((7/5) * floor_power2(((((7/5) * ((((7/10) * x1) - ((13/10) * x0)) + ((7/5) * ((7/10) * x0)))) - ((7/10) * ((7/10) * x0))) + interval(-2.38025192470559198465e-06, 2.38025192470559198465e-06))))
25 (78): exp = -24: ((7/5) * floor_power2(((((((7/10) * x2) - ((13/10) * x1)) + ((11/10) * x0)) + (((7/5) * ((((7/10) * x1) - ((13/10) * x0)) + ((7/5) * ((7/10) * x0)))) - ((7/10) * ((7/10) * x0)))) + interval(-3.98361687413740258971e-06, 3.98361687413740258971e-06))))
26 (81): exp = -24: floor_power2((((7/5) * (((((7/10) * x2) - ((13/10) * x1)) + ((11/10) * x0)) + (((7/5) * ((((7/10) * x1) - ((13/10) * x0)) + ((7/5) * ((7/10) * x0)))) - ((7/10) * ((7/10) * x0))))) + interval(-6.61475675381952121209e-06, 6.61475675381952121209e-06)))
27 (83): exp = -24: floor_power2(((((((7/10) * x3) - ((13/10) * x2)) + ((11/10) * x1)) + ((7/5) * (((((7/10) * x2) - ((13/10) * x1)) + ((11/10) * x0)) + (((7/5) * ((((7/10) * x1) - ((13/10) * x0)) + ((7/5) * ((7/10) * x0)))) - ((7/10) * ((7/10) * x0)))))) + interval(-8.69495886145446486397e-06, 8.69495886145446486397e-06)))
28 (110): exp = -24: (-(floor_power2((((7/10) * ((((7/10) * x1) - ((13/10) * x0)) + ((7/5) * ((7/10) * x0)))) + interval(-8.84652156884158781385e-07, 8.84652156884158781385e-07)))))
29 (112): exp = -24: floor_power2((((((((7/10) * x3) - ((13/10) * x2)) + ((11/10) * x1)) + ((7/5) * (((((7/10) * x2) - ((13/10) * x1)) + ((11/10) * x0)) + (((7/5) * ((((7/10) * x1) - ((13/10) * x0)) + ((7/5) * ((7/10) * x0)))) - ((7/10) * ((7/10) * x0)))))) - ((7/10) * ((((7/10) * x1) - ((13/10) * x0)) + ((7/5) * ((7/10) * x0))))) + interval(-1.07717039138464423922e-05, 1.07717039138464423922e-05)))

Corresponding original subexpressions:
1: rnd32(0)
2: rnd32(x3)
3: rnd32((rnd32((7/10)) * rnd32(x3)))
4: rnd32(x2)
5: rnd32((rnd32((13/10)) * rnd32(x2)))
6: rnd[float32,ne,1.00,-24,0]((rnd32((rnd32((7/10)) * rnd32(x3))) - rnd32((rnd32((13/10)) * rnd32(x2)))))
7: rnd32(x1)
8: rnd32((rnd32((11/10)) * rnd32(x1)))
9: rnd[float32,ne,1.00,-24,0]((rnd[float32,ne,1.00,-24,0]((rnd32((rnd32((7/10)) * rnd32(x3))) - rnd32((rnd32((13/10)) * rnd32(x2))))) + rnd32((rnd32((11/10)) * rnd32(x1)))))
10: rnd32((rnd32((7/10)) * rnd32(x2)))
11: rnd32((rnd32((13/10)) * rnd32(x1)))
12: rnd[float32,ne,1.00,-24,0]((rnd32((rnd32((7/10)) * rnd32(x2))) - rnd32((rnd32((13/10)) * rnd32(x1)))))
13: rnd32(x0)
14: rnd32((rnd32((11/10)) * rnd32(x0)))
15: rnd[float32,ne,1.00,-24,0]((rnd[float32,ne,1.00,-24,0]((rnd32((rnd32((7/10)) * rnd32(x2))) - rnd32((rnd32((13/10)) * rnd32(x1))))) + rnd32((rnd32((11/10)) * rnd32(x0)))))
16: rnd32((rnd32((7/10)) * rnd32(x1)))
17: rnd32((rnd32((13/10)) * rnd32(x0)))
18: rnd[float32,ne,1.00,-24,0]((rnd32((rnd32((7/10)) * rnd32(x1))) - rnd32((rnd32((13/10)) * rnd32(x0)))))
19: rnd32((rnd32((7/10)) * rnd32(x0)))
20: rnd32((rnd32((7/5)) * rnd32((rnd32((7/10)) * rnd32(x0)))))
21: rnd[float32,ne,1.00,-24,0]((rnd[float32,ne,1.00,-24,0]((rnd32((rnd32((7/10)) * rnd32(x1))) - rnd32((rnd32((13/10)) * rnd32(x0))))) + rnd32((rnd32((7/5)) * rnd32((rnd32((7/10)) * rnd32(x0)))))))
22: rnd32((rnd32((7/5)) * rnd[float32,ne,1.00,-24,0]((rnd[float32,ne,1.00,-24,0]((rnd32((rnd32((7/10)) * rnd32(x1))) - rnd32((rnd32((13/10)) * rnd32(x0))))) + rnd32((rnd32((7/5)) * rnd32((rnd32((7/10)) * rnd32(x0)))))))))
23: rnd32((rnd32((7/10)) * rnd32((rnd32((7/10)) * rnd32(x0)))))
24: rnd[float32,ne,1.00,-24,0]((rnd32((rnd32((7/5)) * rnd[float32,ne,1.00,-24,0]((rnd[float32,ne,1.00,-24,0]((rnd32((rnd32((7/10)) * rnd32(x1))) - rnd32((rnd32((13/10)) * rnd32(x0))))) + rnd32((rnd32((7/5)) * rnd32((rnd32((7/10)) * rnd32(x0))))))))) - rnd32((rnd32((7/10)) * rnd32((rnd32((7/10)) * rnd32(x0)))))))
25: rnd[float32,ne,1.00,-24,0]((rnd[float32,ne,1.00,-24,0]((rnd[float32,ne,1.00,-24,0]((rnd32((rnd32((7/10)) * rnd32(x2))) - rnd32((rnd32((13/10)) * rnd32(x1))))) + rnd32((rnd32((11/10)) * rnd32(x0))))) + rnd[float32,ne,1.00,-24,0]((rnd32((rnd32((7/5)) * rnd[float32,ne,1.00,-24,0]((rnd[float32,ne,1.00,-24,0]((rnd32((rnd32((7/10)) * rnd32(x1))) - rnd32((rnd32((13/10)) * rnd32(x0))))) + rnd32((rnd32((7/5)) * rnd32((rnd32((7/10)) * rnd32(x0))))))))) - rnd32((rnd32((7/10)) * rnd32((rnd32((7/10)) * rnd32(x0)))))))))
26: rnd32((rnd32((7/5)) * rnd[float32,ne,1.00,-24,0]((rnd[float32,ne,1.00,-24,0]((rnd[float32,ne,1.00,-24,0]((rnd32((rnd32((7/10)) * rnd32(x2))) - rnd32((rnd32((13/10)) * rnd32(x1))))) + rnd32((rnd32((11/10)) * rnd32(x0))))) + rnd[float32,ne,1.00,-24,0]((rnd32((rnd32((7/5)) * rnd[float32,ne,1.00,-24,0]((rnd[float32,ne,1.00,-24,0]((rnd32((rnd32((7/10)) * rnd32(x1))) - rnd32((rnd32((13/10)) * rnd32(x0))))) + rnd32((rnd32((7/5)) * rnd32((rnd32((7/10)) * rnd32(x0))))))))) - rnd32((rnd32((7/10)) * rnd32((rnd32((7/10)) * rnd32(x0)))))))))))
27: rnd[float32,ne,1.00,-24,0]((rnd[float32,ne,1.00,-24,0]((rnd[float32,ne,1.00,-24,0]((rnd32((rnd32((7/10)) * rnd32(x3))) - rnd32((rnd32((13/10)) * rnd32(x2))))) + rnd32((rnd32((11/10)) * rnd32(x1))))) + rnd32((rnd32((7/5)) * rnd[float32,ne,1.00,-24,0]((rnd[float32,ne,1.00,-24,0]((rnd[float32,ne,1.00,-24,0]((rnd32((rnd32((7/10)) * rnd32(x2))) - rnd32((rnd32((13/10)) * rnd32(x1))))) + rnd32((rnd32((11/10)) * rnd32(x0))))) + rnd[float32,ne,1.00,-24,0]((rnd32((rnd32((7/5)) * rnd[float32,ne,1.00,-24,0]((rnd[float32,ne,1.00,-24,0]((rnd32((rnd32((7/10)) * rnd32(x1))) - rnd32((rnd32((13/10)) * rnd32(x0))))) + rnd32((rnd32((7/5)) * rnd32((rnd32((7/10)) * rnd32(x0))))))))) - rnd32((rnd32((7/10)) * rnd32((rnd32((7/10)) * rnd32(x0)))))))))))))
28: rnd32((rnd32((7/10)) * rnd[float32,ne,1.00,-24,0]((rnd[float32,ne,1.00,-24,0]((rnd32((rnd32((7/10)) * rnd32(x1))) - rnd32((rnd32((13/10)) * rnd32(x0))))) + rnd32((rnd32((7/5)) * rnd32((rnd32((7/10)) * rnd32(x0)))))))))
29: rnd[float32,ne,1.00,-24,0]((rnd[float32,ne,1.00,-24,0]((rnd[float32,ne,1.00,-24,0]((rnd[float32,ne,1.00,-24,0]((rnd32((rnd32((7/10)) * rnd32(x3))) - rnd32((rnd32((13/10)) * rnd32(x2))))) + rnd32((rnd32((11/10)) * rnd32(x1))))) + rnd32((rnd32((7/5)) * rnd[float32,ne,1.00,-24,0]((rnd[float32,ne,1.00,-24,0]((rnd[float32,ne,1.00,-24,0]((rnd32((rnd32((7/10)) * rnd32(x2))) - rnd32((rnd32((13/10)) * rnd32(x1))))) + rnd32((rnd32((11/10)) * rnd32(x0))))) + rnd[float32,ne,1.00,-24,0]((rnd32((rnd32((7/5)) * rnd[float32,ne,1.00,-24,0]((rnd[float32,ne,1.00,-24,0]((rnd32((rnd32((7/10)) * rnd32(x1))) - rnd32((rnd32((13/10)) * rnd32(x0))))) + rnd32((rnd32((7/5)) * rnd32((rnd32((7/10)) * rnd32(x0))))))))) - rnd32((rnd32((7/10)) * rnd32((rnd32((7/10)) * rnd32(x0))))))))))))) - rnd32((rnd32((7/10)) * rnd[float32,ne,1.00,-24,0]((rnd[float32,ne,1.00,-24,0]((rnd32((rnd32((7/10)) * rnd32(x1))) - rnd32((rnd32((13/10)) * rnd32(x0))))) + rnd32((rnd32((7/5)) * rnd32((rnd32((7/10)) * rnd32(x0)))))))))))

bounds: [-3.321928e+00, 3.321928e+00]

Computing absolute errors
-1: exp = -24: 3.250647e-06 (low = 3.250647e-06, subopt = 0.0%)

Solving the exact optimization problem
exact bound (exp = -24): 6.396789e+01 (low = 5.525940e+01, subopt = 13.6%)
total2: 1.937536e-13 (low = 1.937536e-13, subopt = 0.0%)
exact total: 3.812784e-06 (low = 3.293717e-06, subopt = 13.6%)

Computing relative errors
**WARNING**: 
Cannot compute the relative error: values of the function are close to zero

**WARNING**: 0.00000000000000000000000000000000000000000000000000100000000000000000761622370578234285759930916419271389895138472837095389481447900651438935953211746691245522253373491061798089161657965284746296674711629748344421386718750000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000

Elapsed time: 86.28772
*************************************

-------------------------------------------------------------------------------
Problem: filter4

Optimization lower bounds for error models:
The absolute error model (exact): 3.293717e-06 (suboptimality = 13.6%)

Bounds (without rounding): [-3.321928e+00, 3.321928e+00]
Bounds (floating-point): [-3.32193193778378415004e+00, 3.32193193778378415004e+00]

Absolute error (exact): 3.812784e-06

Elapsed time: 86.29


