Loading configuration file: /home/roki/GIT/FPTaylor/./default.cfg
FPTaylor, version 0.9.3+dev

Loading: /home/roki/GIT/FPTaylor/benchmarks/probability/RigidBody2.txt
Processing: rigidbody2

*************************************
Taylor form for: rnd32((rnd32((rnd32((rnd32((rnd32((rnd32((rnd32((rnd32(2) * rnd32(x1))) * rnd32(x2))) * rnd32(x3))) + rnd32((rnd32((rnd32(3) * rnd32(x3))) * rnd32(x3))))) - rnd32((rnd32((rnd32((rnd32(x2) * rnd32(x1))) * rnd32(x2))) * rnd32(x3))))) + rnd32((rnd32((rnd32(3) * rnd32(x3))) * rnd32(x3))))) - rnd32(x2)))

Conservative bound: [-58740.035246, 58740.035246]

Simplified rounding: rnd[float32,ne,1.00,-24,0]((rnd[float32,ne,1.00,-24,0]((rnd[float32,ne,1.00,-24,0]((rnd[float32,ne,1.00,-24,0]((rnd32((rnd32(((2 * rnd32(x1)) * rnd32(x2))) * rnd32(x3))) + rnd32((rnd32((3 * rnd32(x3))) * rnd32(x3))))) - rnd32((rnd32((rnd32((rnd32(x2) * rnd32(x1))) * rnd32(x2))) * rnd32(x3))))) + rnd32((rnd32((3 * rnd32(x3))) * rnd32(x3))))) - rnd32(x2)))
Building Taylor forms...
Simplifying Taylor forms...
success
v0 = (((((((2 * x1) * x2) * x3) + ((3 * x3) * x3)) - (((x2 * x1) * x2) * x3)) + ((3 * x3) * x3)) - x2)
-1 (70): exp = -24: (4886229755625479/576460752303423488)
1 (1): exp = -24: ((x3 * (x2 * (2 * floor_power2(x1)))) + (-((x3 * (x2 * (x2 * floor_power2(x1)))))))
2 (3): exp = -24: ((((x3 * ((2 * x1) * floor_power2(x2))) + (-((x3 * ((x2 * x1) * floor_power2(x2)))))) + (-((x3 * (x2 * (x1 * floor_power2(x2))))))) + (-(floor_power2(x2))))
3 (5): exp = -24: (x3 * floor_power2((((2 * x1) * x2) + interval(-2.86102299469348508865e-05, 2.86102299469348508865e-05))))
4 (7): exp = -24: ((((((((2 * x1) * x2) * floor_power2(x3)) + ((3 * x3) * floor_power2(x3))) + (x3 * (3 * floor_power2(x3)))) + (-((((x2 * x1) * x2) * floor_power2(x3))))) + ((3 * x3) * floor_power2(x3))) + (x3 * (3 * floor_power2(x3))))
5 (9): exp = -24: floor_power2(((((2 * x1) * x2) * x3) + interval(-8.72612027251307479335e-04, 8.72612027251307479335e-04)))
6 (13): exp = -24: ((x3 * floor_power2(((3 * x3) + interval(-1.43051147460937500000e-06, 1.43051147460937500000e-06)))) + (x3 * floor_power2(((3 * x3) + interval(-1.43051147460937500000e-06, 1.43051147460937500000e-06)))))
7 (17): exp = -24: (floor_power2((((3 * x3) * x3) + interval(-7.15255753220844916552e-05, 7.15255753220844916552e-05))) + floor_power2((((3 * x3) * x3) + interval(-7.15255753220844916552e-05, 7.15255753220844916552e-05))))
8 (19): exp = -24: floor_power2((((((2 * x1) * x2) * x3) + ((3 * x3) * x3)) + interval(-1.21879580569839206586e-03, 1.21879580569839206586e-03)))
9 (24): exp = -24: (-((x3 * (x2 * floor_power2(((x2 * x1) + interval(-1.43051149734674254432e-05, 1.43051149734674254432e-05)))))))
10 (28): exp = -24: (-((x3 * floor_power2((((x2 * x1) * x2) + interval(-4.36306013625653739667e-04, 4.36306013625653739667e-04))))))
11 (32): exp = -24: (-(floor_power2(((((x2 * x1) * x2) * x3) + interval(-9.98497056707493314820e-03, 9.98497056707493314820e-03)))))
12 (34): exp = -24: floor_power2(((((((2 * x1) * x2) * x3) + ((3 * x3) * x3)) - (((x2 * x1) * x2) * x3)) + interval(-1.34010319977733351887e-02, 1.34010319977733351887e-02)))
13 (44): exp = -24: floor_power2((((((((2 * x1) * x2) * x3) + ((3 * x3) * x3)) - (((x2 * x1) * x2) * x3)) + ((3 * x3) * x3)) + interval(-1.54562001512204196668e-02, 1.54562001512204196668e-02)))
14 (47): exp = -24: floor_power2(((((((((2 * x1) * x2) * x3) + ((3 * x3) * x3)) - (((x2 * x1) * x2) * x3)) + ((3 * x3) * x3)) - x2) + interval(-1.74098019883786245265e-02, 1.74098019883786245265e-02)))

Corresponding original subexpressions:
1: rnd32(x1)
2: rnd32(x2)
3: rnd32(((2 * rnd32(x1)) * rnd32(x2)))
4: rnd32(x3)
5: rnd32((rnd32(((2 * rnd32(x1)) * rnd32(x2))) * rnd32(x3)))
6: rnd32((3 * rnd32(x3)))
7: rnd32((rnd32((3 * rnd32(x3))) * rnd32(x3)))
8: rnd[float32,ne,1.00,-24,0]((rnd32((rnd32(((2 * rnd32(x1)) * rnd32(x2))) * rnd32(x3))) + rnd32((rnd32((3 * rnd32(x3))) * rnd32(x3)))))
9: rnd32((rnd32(x2) * rnd32(x1)))
10: rnd32((rnd32((rnd32(x2) * rnd32(x1))) * rnd32(x2)))
11: rnd32((rnd32((rnd32((rnd32(x2) * rnd32(x1))) * rnd32(x2))) * rnd32(x3)))
12: rnd[float32,ne,1.00,-24,0]((rnd[float32,ne,1.00,-24,0]((rnd32((rnd32(((2 * rnd32(x1)) * rnd32(x2))) * rnd32(x3))) + rnd32((rnd32((3 * rnd32(x3))) * rnd32(x3))))) - rnd32((rnd32((rnd32((rnd32(x2) * rnd32(x1))) * rnd32(x2))) * rnd32(x3)))))
13: rnd[float32,ne,1.00,-24,0]((rnd[float32,ne,1.00,-24,0]((rnd[float32,ne,1.00,-24,0]((rnd32((rnd32(((2 * rnd32(x1)) * rnd32(x2))) * rnd32(x3))) + rnd32((rnd32((3 * rnd32(x3))) * rnd32(x3))))) - rnd32((rnd32((rnd32((rnd32(x2) * rnd32(x1))) * rnd32(x2))) * rnd32(x3))))) + rnd32((rnd32((3 * rnd32(x3))) * rnd32(x3)))))
14: rnd[float32,ne,1.00,-24,0]((rnd[float32,ne,1.00,-24,0]((rnd[float32,ne,1.00,-24,0]((rnd[float32,ne,1.00,-24,0]((rnd32((rnd32(((2 * rnd32(x1)) * rnd32(x2))) * rnd32(x3))) + rnd32((rnd32((3 * rnd32(x3))) * rnd32(x3))))) - rnd32((rnd32((rnd32((rnd32(x2) * rnd32(x1))) * rnd32(x2))) * rnd32(x3))))) + rnd32((rnd32((3 * rnd32(x3))) * rnd32(x3))))) - rnd32(x2)))

bounds: [-5.632828e+04, 5.874000e+04]

Computing absolute errors
-1: exp = -24: 8.476257e-03 (low = 8.476257e-03, subopt = 0.0%)

Solving the exact optimization problem
exact bound (exp = -24): 3.248560e+05 (low = 3.219600e+05, subopt = 0.9%)
total2: 5.052243e-10 (low = 5.052243e-10, subopt = 0.0%)
exact total: 1.936293e-02 (low = 1.919031e-02, subopt = 0.9%)

Computing relative errors
**WARNING**: 
Cannot compute the relative error: values of the function are close to zero

**WARNING**: 0.00000000000000000000000000000000000000000000000000100000000000000000761622370578234285759930916419271389895138472837095389481447900651438935953211746691245522253373491061798089161657965284746296674711629748344421386718750000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000

Elapsed time: 0.39973
*************************************

-------------------------------------------------------------------------------
Problem: rigidbody2

Optimization lower bounds for error models:
The absolute error model (exact): 1.919031e-02 (suboptimality = 0.9%)

Bounds (without rounding): [-5.632828e+04, 5.874000e+04]
Bounds (floating-point): [-5.63283006129269924713e+04, 5.87400193629269924713e+04]

Absolute error (exact): 1.936293e-02

Elapsed time: 0.40


