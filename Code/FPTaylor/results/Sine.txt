Loading configuration file: /home/roki/GIT/FPTaylor/./default.cfg
FPTaylor, version 0.9.3+dev

Loading: /home/roki/GIT/FPTaylor/benchmarks/probability/Sine.txt
Processing: sine

*************************************
Taylor form for: rnd32((rnd32((rnd32((rnd32(x) - rnd32((rnd32((rnd32((rnd32(x) * rnd32(x))) * rnd32(x))) / rnd32(6))))) + rnd32((rnd32((rnd32((rnd32((rnd32((rnd32(x) * rnd32(x))) * rnd32(x))) * rnd32(x))) * rnd32(x))) / rnd32(120))))) - rnd32((rnd32((rnd32((rnd32((rnd32((rnd32((rnd32((rnd32(x) * rnd32(x))) * rnd32(x))) * rnd32(x))) * rnd32(x))) * rnd32(x))) * rnd32(x))) / rnd32(5040)))))

Conservative bound: [-2.301136, 2.301136]

Simplified rounding: rnd[float32,ne,1.00,-24,0]((rnd[float32,ne,1.00,-24,0]((rnd[float32,ne,1.00,-24,0]((rnd32(x) - rnd32((rnd32((rnd32((rnd32(x) * rnd32(x))) * rnd32(x))) / 6)))) + rnd32((rnd32((rnd32((rnd32((rnd32((rnd32(x) * rnd32(x))) * rnd32(x))) * rnd32(x))) * rnd32(x))) / 120)))) - rnd32((rnd32((rnd32((rnd32((rnd32((rnd32((rnd32((rnd32(x) * rnd32(x))) * rnd32(x))) * rnd32(x))) * rnd32(x))) * rnd32(x))) * rnd32(x))) / 5040))))
Building Taylor forms...
Simplifying Taylor forms...
success
v0 = (((x - (((x * x) * x) * (1 / 6))) + (((((x * x) * x) * x) * x) * (1 / 120))) - (((((((x * x) * x) * x) * x) * x) * x) * (1 / 5040)))
-1 (105): exp = -24: (1938015356840341/18889465931478580854784)
1 (1): exp = -24: (((((((((((((((floor_power2(x) + (-(((1 / 6) * ((x * x) * floor_power2(x)))))) + (-(((1 / 6) * (x * (x * floor_power2(x))))))) + (-(((1 / 6) * (x * (x * floor_power2(x))))))) + ((1 / 120) * ((((x * x) * x) * x) * floor_power2(x)))) + ((1 / 120) * (x * (((x * x) * x) * floor_power2(x))))) + ((1 / 120) * (x * (x * ((x * x) * floor_power2(x)))))) + ((1 / 120) * (x * (x * (x * (x * floor_power2(x))))))) + ((1 / 120) * (x * (x * (x * (x * floor_power2(x))))))) + (-(((1 / 5040) * ((((((x * x) * x) * x) * x) * x) * floor_power2(x)))))) + (-(((1 / 5040) * (x * (((((x * x) * x) * x) * x) * floor_power2(x))))))) + (-(((1 / 5040) * (x * (x * ((((x * x) * x) * x) * floor_power2(x)))))))) + (-(((1 / 5040) * (x * (x * (x * (((x * x) * x) * floor_power2(x))))))))) + (-(((1 / 5040) * (x * (x * (x * (x * ((x * x) * floor_power2(x)))))))))) + (-(((1 / 5040) * (x * (x * (x * (x * (x * (x * floor_power2(x))))))))))) + (-(((1 / 5040) * (x * (x * (x * (x * (x * (x * floor_power2(x)))))))))))
2 (5): exp = -24: (((-(((1 / 6) * (x * floor_power2(((x * x) + interval(-1.87253517698326399096e-07, 1.87253517698326399096e-07))))))) + ((1 / 120) * (x * (x * (x * floor_power2(((x * x) + interval(-1.87253517698326399096e-07, 1.87253517698326399096e-07)))))))) + (-(((1 / 5040) * (x * (x * (x * (x * (x * floor_power2(((x * x) + interval(-1.87253517698326399096e-07, 1.87253517698326399096e-07))))))))))))
3 (9): exp = -24: (((-(((1 / 6) * floor_power2((((x * x) * x) + interval(-6.28459236290480882072e-07, 6.28459236290480882072e-07)))))) + ((1 / 120) * (x * (x * floor_power2((((x * x) * x) + interval(-6.28459236290480882072e-07, 6.28459236290480882072e-07))))))) + (-(((1 / 5040) * (x * (x * (x * (x * floor_power2((((x * x) * x) + interval(-6.28459236290480882072e-07, 6.28459236290480882072e-07)))))))))))
4 (13): exp = -24: (-(floor_power2(((((x * x) * x) * (1 / 6)) + interval(-1.24611420973543715148e-07, 1.24611420973543715148e-07)))))
5 (15): exp = -24: floor_power2(((x - (((x * x) * x) * (1 / 6))) + interval(-2.14018388136629652648e-07, 2.14018388136629652648e-07)))
6 (28): exp = -24: (((1 / 120) * (x * floor_power2(((((x * x) * x) * x) + interval(-1.40544978202739905945e-06, 1.40544978202739905945e-06))))) + (-(((1 / 5040) * (x * (x * (x * floor_power2(((((x * x) * x) * x) + interval(-1.40544978202739905945e-06, 1.40544978202739905945e-06))))))))))
7 (32): exp = -24: (((1 / 120) * floor_power2((((((x * x) * x) * x) * x) + interval(-2.94505962317629862312e-06, 2.94505962317629862312e-06)))) + (-(((1 / 5040) * (x * (x * floor_power2((((((x * x) * x) * x) * x) + interval(-2.94505962317629862312e-06, 2.94505962317629862312e-06)))))))))
8 (36): exp = -24: floor_power2(((((((x * x) * x) * x) * x) * (1 / 120)) + interval(-2.85158065114952014916e-08, 2.85158065114952014916e-08)))
9 (38): exp = -24: floor_power2((((x - (((x * x) * x) * (1 / 6))) + (((((x * x) * x) * x) * x) * (1 / 120))) + interval(-3.65468774497368061216e-07, 3.65468774497368061216e-07)))
10 (59): exp = -24: (-(((1 / 5040) * (x * floor_power2(((((((x * x) * x) * x) * x) * x) + interval(-5.94510918023187177460e-06, 5.94510918023187177460e-06)))))))
11 (63): exp = -24: (-(((1 / 5040) * floor_power2((((((((x * x) * x) * x) * x) * x) * x) + interval(-1.09829335609853230354e-05, 1.09829335609853230354e-05))))))
12 (67): exp = -24: (-(floor_power2(((((((((x * x) * x) * x) * x) * x) * x) * (1 / 5040)) + interval(-2.36837457884753422344e-09, 2.36837457884753422344e-09)))))
13 (69): exp = -24: floor_power2(((((x - (((x * x) * x) * (1 / 6))) + (((((x * x) * x) * x) * x) * (1 / 120))) - (((((((x * x) * x) * x) * x) * x) * x) * (1 / 5040))) + interval(-4.87279269270650798200e-07, 4.87279269270650798200e-07)))

Corresponding original subexpressions:
1: rnd32(x)
2: rnd32((rnd32(x) * rnd32(x)))
3: rnd32((rnd32((rnd32(x) * rnd32(x))) * rnd32(x)))
4: rnd32((rnd32((rnd32((rnd32(x) * rnd32(x))) * rnd32(x))) / 6))
5: rnd[float32,ne,1.00,-24,0]((rnd32(x) - rnd32((rnd32((rnd32((rnd32(x) * rnd32(x))) * rnd32(x))) / 6))))
6: rnd32((rnd32((rnd32((rnd32(x) * rnd32(x))) * rnd32(x))) * rnd32(x)))
7: rnd32((rnd32((rnd32((rnd32((rnd32(x) * rnd32(x))) * rnd32(x))) * rnd32(x))) * rnd32(x)))
8: rnd32((rnd32((rnd32((rnd32((rnd32((rnd32(x) * rnd32(x))) * rnd32(x))) * rnd32(x))) * rnd32(x))) / 120))
9: rnd[float32,ne,1.00,-24,0]((rnd[float32,ne,1.00,-24,0]((rnd32(x) - rnd32((rnd32((rnd32((rnd32(x) * rnd32(x))) * rnd32(x))) / 6)))) + rnd32((rnd32((rnd32((rnd32((rnd32((rnd32(x) * rnd32(x))) * rnd32(x))) * rnd32(x))) * rnd32(x))) / 120))))
10: rnd32((rnd32((rnd32((rnd32((rnd32((rnd32(x) * rnd32(x))) * rnd32(x))) * rnd32(x))) * rnd32(x))) * rnd32(x)))
11: rnd32((rnd32((rnd32((rnd32((rnd32((rnd32((rnd32(x) * rnd32(x))) * rnd32(x))) * rnd32(x))) * rnd32(x))) * rnd32(x))) * rnd32(x)))
12: rnd32((rnd32((rnd32((rnd32((rnd32((rnd32((rnd32((rnd32(x) * rnd32(x))) * rnd32(x))) * rnd32(x))) * rnd32(x))) * rnd32(x))) * rnd32(x))) / 5040))
13: rnd[float32,ne,1.00,-24,0]((rnd[float32,ne,1.00,-24,0]((rnd[float32,ne,1.00,-24,0]((rnd32(x) - rnd32((rnd32((rnd32((rnd32(x) * rnd32(x))) * rnd32(x))) / 6)))) + rnd32((rnd32((rnd32((rnd32((rnd32((rnd32(x) * rnd32(x))) * rnd32(x))) * rnd32(x))) * rnd32(x))) / 120)))) - rnd32((rnd32((rnd32((rnd32((rnd32((rnd32((rnd32((rnd32(x) * rnd32(x))) * rnd32(x))) * rnd32(x))) * rnd32(x))) * rnd32(x))) * rnd32(x))) / 5040))))

bounds: [-1.015115e+00, 1.015115e+00]

Computing absolute errors
-1: exp = -24: 1.025977e-07 (low = 1.025977e-07, subopt = 0.0%)

Solving the exact optimization problem
exact bound (exp = -24): 3.990584e+00 (low = 3.480385e+00, subopt = 12.8%)
total2: 6.115298e-15 (low = 6.115298e-15, subopt = 0.0%)
exact total: 2.378573e-07 (low = 2.074471e-07, subopt = 12.8%)

Computing relative errors
**WARNING**: 
Cannot compute the relative error: values of the function are close to zero

**WARNING**: 0.00000000000000000000000000000000000000000000000000100000000000000000761622370578234285759930916419271389895138472837095389481447900651438935953211746691245522253373491061798089161657965284746296674711629748344421386718750000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000

Elapsed time: 0.45360
*************************************

-------------------------------------------------------------------------------
Problem: sine

Optimization lower bounds for error models:
The absolute error model (exact): 2.074471e-07 (suboptimality = 12.8%)

Bounds (without rounding): [-1.015115e+00, 1.015115e+00]
Bounds (floating-point): [-1.01511526142621688606e+00, 1.01511526142621688606e+00]

Absolute error (exact): 2.378573e-07

Elapsed time: 0.45


