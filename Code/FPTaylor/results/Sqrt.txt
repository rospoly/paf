Loading configuration file: /home/roki/GIT/FPTaylor/./default.cfg
FPTaylor, version 0.9.3+dev

Loading: /home/roki/GIT/FPTaylor/benchmarks/probability/Sqrt.txt
Processing: my_sqrt

*************************************
Taylor form for: rnd32((rnd32((rnd32((rnd32((rnd32(1) + rnd32((rnd32((1/2)) * rnd32(x))))) - rnd32((rnd32((rnd32((1/8)) * rnd32(x))) * rnd32(x))))) + rnd32((rnd32((rnd32((rnd32((1/16)) * rnd32(x))) * rnd32(x))) * rnd32(x))))) - rnd32((rnd32((rnd32((rnd32((rnd32((5/128)) * rnd32(x))) * rnd32(x))) * rnd32(x))) * rnd32(x)))))

Conservative bound: [-402.125239, 68.500036]

Simplified rounding: rnd[float32,ne,1.00,-24,0]((rnd[float32,ne,1.00,-24,0]((rnd[float32,ne,1.00,-24,0]((rnd[float32,ne,1.00,-24,0]((1 + rnd[float32,ne,1.00,0,-150](((1/2) * rnd32(x))))) - rnd32((rnd[float32,ne,1.00,0,-150](((1/8) * rnd32(x))) * rnd32(x))))) + rnd32((rnd32((rnd[float32,ne,1.00,0,-150](((1/16) * rnd32(x))) * rnd32(x))) * rnd32(x))))) - rnd32((rnd32((rnd32((rnd32(((5/128) * rnd32(x))) * rnd32(x))) * rnd32(x))) * rnd32(x)))))
Building Taylor forms...
Simplifying Taylor forms...
success
v0 = ((((1 + ((1/2) * x)) - (((1/8) * x) * x)) + ((((1/16) * x) * x) * x)) - (((((5/128) * x) * x) * x) * x))
-1 (68): exp = -24: (3118215070744579/18446744073709551616)
1 (1): exp = -24: (((((((((((1/2) * floor_power2(x)) + (-((((1/8) * x) * floor_power2(x))))) + (-((x * ((1/8) * floor_power2(x)))))) + ((((1/16) * x) * x) * floor_power2(x))) + (x * (((1/16) * x) * floor_power2(x)))) + (x * (x * ((1/16) * floor_power2(x))))) + (-((((((5/128) * x) * x) * x) * floor_power2(x))))) + (-((x * ((((5/128) * x) * x) * floor_power2(x)))))) + (-((x * (x * (((5/128) * x) * floor_power2(x))))))) + (-((x * (x * (x * ((5/128) * floor_power2(x))))))))
2 (4): exp = -24: floor_power2(((1 + ((1/2) * x)) + interval(-2.38418579101562552940e-07, 2.38418579101562552940e-07)))
3 (11): exp = -24: (-(floor_power2(((((1/8) * x) * x) + interval(-1.19209292392952214216e-06, 1.19209292392952214216e-06)))))
4 (13): exp = -24: floor_power2((((1 + ((1/2) * x)) - (((1/8) * x) * x)) + interval(-2.14576724033577235392e-06, 2.14576724033577235392e-06)))
5 (20): exp = -24: (x * floor_power2(((((1/16) * x) * x) + interval(-5.96046461964761071081e-07, 5.96046461964761071081e-07))))
6 (24): exp = -24: floor_power2((((((1/16) * x) * x) * x) + interval(-1.13248830473367063980e-05, 1.13248830473367063980e-05)))
7 (26): exp = -24: floor_power2(((((1 + ((1/2) * x)) - (((1/8) * x) * x)) + ((((1/16) * x) * x) * x)) + interval(-1.58548360786881117987e-05, 1.58548360786881117987e-05)))
8 (30): exp = -24: (-((x * (x * (x * floor_power2((((5/128) * x) + interval(-1.86264514923095703125e-08, 1.86264514923095703125e-08))))))))
9 (34): exp = -24: (-((x * (x * floor_power2(((((5/128) * x) * x) + interval(-5.21540657771879629231e-07, 5.21540657771879629231e-07)))))))
10 (38): exp = -24: (-((x * floor_power2((((((5/128) * x) * x) * x) + interval(-8.27014492799094961195e-06, 8.27014492799094961195e-06))))))
11 (42): exp = -24: (-(floor_power2(((((((5/128) * x) * x) * x) * x) + interval(-1.20401391953351178678e-04, 1.20401391953351178678e-04)))))
12 (44): exp = -24: floor_power2((((((1 + ((1/2) * x)) - (((1/8) * x) * x)) + ((((1/16) * x) * x) * x)) - (((((5/128) * x) * x) * x) * x)) + interval(-1.55329714360164531034e-04, 1.55329714360164531034e-04)))

Corresponding original subexpressions:
1: rnd32(x)
2: rnd[float32,ne,1.00,-24,0]((1 + rnd[float32,ne,1.00,0,-150](((1/2) * rnd32(x)))))
3: rnd32((rnd[float32,ne,1.00,0,-150](((1/8) * rnd32(x))) * rnd32(x)))
4: rnd[float32,ne,1.00,-24,0]((rnd[float32,ne,1.00,-24,0]((1 + rnd[float32,ne,1.00,0,-150](((1/2) * rnd32(x))))) - rnd32((rnd[float32,ne,1.00,0,-150](((1/8) * rnd32(x))) * rnd32(x)))))
5: rnd32((rnd[float32,ne,1.00,0,-150](((1/16) * rnd32(x))) * rnd32(x)))
6: rnd32((rnd32((rnd[float32,ne,1.00,0,-150](((1/16) * rnd32(x))) * rnd32(x))) * rnd32(x)))
7: rnd[float32,ne,1.00,-24,0]((rnd[float32,ne,1.00,-24,0]((rnd[float32,ne,1.00,-24,0]((1 + rnd[float32,ne,1.00,0,-150](((1/2) * rnd32(x))))) - rnd32((rnd[float32,ne,1.00,0,-150](((1/8) * rnd32(x))) * rnd32(x))))) + rnd32((rnd32((rnd[float32,ne,1.00,0,-150](((1/16) * rnd32(x))) * rnd32(x))) * rnd32(x)))))
8: rnd32(((5/128) * rnd32(x)))
9: rnd32((rnd32(((5/128) * rnd32(x))) * rnd32(x)))
10: rnd32((rnd32((rnd32(((5/128) * rnd32(x))) * rnd32(x))) * rnd32(x)))
11: rnd32((rnd32((rnd32((rnd32(((5/128) * rnd32(x))) * rnd32(x))) * rnd32(x))) * rnd32(x)))
12: rnd[float32,ne,1.00,-24,0]((rnd[float32,ne,1.00,-24,0]((rnd[float32,ne,1.00,-24,0]((rnd[float32,ne,1.00,-24,0]((1 + rnd[float32,ne,1.00,0,-150](((1/2) * rnd32(x))))) - rnd32((rnd[float32,ne,1.00,0,-150](((1/8) * rnd32(x))) * rnd32(x))))) + rnd32((rnd32((rnd[float32,ne,1.00,0,-150](((1/16) * rnd32(x))) * rnd32(x))) * rnd32(x))))) - rnd32((rnd32((rnd32((rnd32(((5/128) * rnd32(x))) * rnd32(x))) * rnd32(x))) * rnd32(x)))))

bounds: [-3.375873e+02, 1.500669e+00]

Computing absolute errors
-1: exp = -24: 1.690388e-04 (low = 1.690388e-04, subopt = 0.0%)

Solving the exact optimization problem
exact bound (exp = -24): 2.536164e+03 (low = 2.518000e+03, subopt = 0.7%)
total2: 1.007550e-11 (low = 1.007550e-11, subopt = 0.0%)
exact total: 1.511672e-04 (low = 1.500845e-04, subopt = 0.7%)

Computing relative errors
**WARNING**: 
Cannot compute the relative error: values of the function are close to zero

**WARNING**: 0.00000000000000000000000000000000000000000000000000100000000000000000761622370578234285759930916419271389895138472837095389481447900651438935953211746691245522253373491061798089161657965284746296674711629748344421386718750000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000

Elapsed time: 0.39301
*************************************

-------------------------------------------------------------------------------
Problem: my_sqrt

Optimization lower bounds for error models:
The absolute error model (exact): 1.500845e-04 (suboptimality = 0.7%)

Bounds (without rounding): [-3.375873e+02, 1.500669e+00]
Bounds (floating-point): [-3.37587425718559757115e+02, 1.50082009894056533916e+00]

Absolute error (exact): 1.511672e-04

Elapsed time: 0.39


