Loading configuration file: /home/roki/GIT/FPTaylor/./default.cfg
FPTaylor, version 0.9.3+dev

Loading: /home/roki/GIT/FPTaylor/benchmarks/probability/Turbine1.txt
Processing: turbine1

*************************************
Taylor form for: rnd32((rnd32((rnd32((rnd32(3) + rnd32((rnd32(2) / rnd32((rnd32(r) * rnd32(r))))))) - rnd32((rnd32((rnd32((rnd32((1/8)) * rnd32((rnd32(3) - rnd32((rnd32(2) * rnd32(v))))))) * rnd32((rnd32((rnd32((rnd32(w) * rnd32(w))) * rnd32(r))) * rnd32(r))))) / rnd32((rnd32(1) - rnd32(v))))))) - rnd32((9/2))))

Conservative bound: [-58.329190, -1.550527]

Simplified rounding: rnd[float32,ne,1.00,-24,0]((rnd[float32,ne,1.00,-24,0]((rnd[float32,ne,1.00,-24,0]((3 + rnd32((2 / rnd32((rnd32(r) * rnd32(r))))))) - rnd32((rnd32((rnd[float32,ne,1.00,0,-150](((1/8) * rnd[float32,ne,1.00,-24,0]((3 - (2 * rnd32(v)))))) * rnd32((rnd32((rnd32((rnd32(w) * rnd32(w))) * rnd32(r))) * rnd32(r))))) / rnd[float32,ne,1.00,-24,0]((1 - rnd32(v))))))) - (9/2)))
Building Taylor forms...
Simplifying Taylor forms...
success
v0 = (((3 + (2 * (1 / (r * r)))) - ((((1/8) * (3 - (2 * v))) * (((w * w) * r) * r)) * (1 / (1 - v)))) - (9/2))
-1 (67): exp = -24: (2638385044670633/9223372036854775808)
1 (2): exp = -24: ((((2 * (-(((r * floor_power2(r)) / ((r * r) * (r * r)))))) + (2 * (-(((r * floor_power2(r)) / ((r * r) * (r * r))))))) + (-(((1 / (1 - v)) * (((1/8) * (3 - (2 * v))) * (((w * w) * r) * floor_power2(r))))))) + (-(((1 / (1 - v)) * (((1/8) * (3 - (2 * v))) * (r * ((w * w) * floor_power2(r))))))))
2 (4): exp = -24: (2 * (-((floor_power2(((r * r) + interval(-3.71932989082779419962e-06, 3.71932989082779419962e-06))) / ((r * r) * (r * r))))))
3 (8): exp = -24: floor_power2(((2 * (1 / (r * r))) + interval(-5.39694362010898684995e-08, 5.39694362010898684995e-08)))
4 (10): exp = -24: floor_power2(((3 + (2 * (1 / (r * r)))) + interval(-6.14200167980137032420e-08, 6.14200167980137032420e-08)))
5 (34): exp = -24: ((-(((((1/8) * (3 - (2 * v))) * (((w * w) * r) * r)) * (-(((-(floor_power2(v))) / ((1 - v) * (1 - v)))))))) + (-(((1 / (1 - v)) * ((((w * w) * r) * r) * ((1/8) * (-((2 * floor_power2(v))))))))))
6 (14): exp = -24: (-(((1 / (1 - v)) * ((((w * w) * r) * r) * ((1/8) * floor_power2(((3 - (2 * v)) + interval(-4.76837158203125000000e-07, 4.76837158203125000000e-07))))))))
7 (19): exp = -24: ((-(((1 / (1 - v)) * (((1/8) * (3 - (2 * v))) * (r * (r * (w * floor_power2(w)))))))) + (-(((1 / (1 - v)) * (((1/8) * (3 - (2 * v))) * (r * (r * (w * floor_power2(w)))))))))
8 (21): exp = -24: (-(((1 / (1 - v)) * (((1/8) * (3 - (2 * v))) * (r * (r * floor_power2(((w * w) + interval(-5.36441811860299835236e-08, 5.36441811860299835236e-08)))))))))
9 (25): exp = -24: (-(((1 / (1 - v)) * (((1/8) * (3 - (2 * v))) * (r * floor_power2((((w * w) * r) + interval(-8.44001796842519893403e-07, 8.44001796842519893403e-07))))))))
10 (29): exp = -24: (-(((1 / (1 - v)) * (((1/8) * (3 - (2 * v))) * floor_power2(((((w * w) * r) * r) + interval(-9.94920777319664515609e-06, 9.94920777319664515609e-06)))))))
11 (32): exp = -24: (-(((1 / (1 - v)) * floor_power2(((((1/8) * (3 - (2 * v))) * (((w * w) * r) * r)) + interval(-2.36595174952037138087e-05, 2.36595174952037138087e-05))))))
12 (35): exp = -24: (-(((((1/8) * (3 - (2 * v))) * (((w * w) * r) * r)) * (-((floor_power2(((1 - v) + interval(-2.38418579101562500000e-07, 2.38418579101562500000e-07))) / ((1 - v) * (1 - v))))))))
13 (39): exp = -24: (-(floor_power2((((((1/8) * (3 - (2 * v))) * (((w * w) * r) * r)) * (1 / (1 - v))) + interval(-4.19908840564584467719e-05, 4.19908840564584467719e-05)))))
14 (41): exp = -24: floor_power2((((3 + (2 * (1 / (r * r)))) - ((((1/8) * (3 - (2 * v))) * (((w * w) * r) * r)) * (1 / (1 - v)))) + interval(-4.40788619956197742300e-05, 4.40788619956197742300e-05)))
15 (43): exp = -24: floor_power2(((((3 + (2 * (1 / (r * r)))) - ((((1/8) * (3 - (2 * v))) * (((w * w) * r) * r)) * (1 / (1 - v)))) - (9/2)) + interval(-4.59862106284322742300e-05, 4.59862106284322742300e-05)))

Corresponding original subexpressions:
1: rnd32(r)
2: rnd32((rnd32(r) * rnd32(r)))
3: rnd32((2 / rnd32((rnd32(r) * rnd32(r)))))
4: rnd[float32,ne,1.00,-24,0]((3 + rnd32((2 / rnd32((rnd32(r) * rnd32(r)))))))
5: rnd32(v)
6: rnd[float32,ne,1.00,-24,0]((3 - (2 * rnd32(v))))
7: rnd32(w)
8: rnd32((rnd32(w) * rnd32(w)))
9: rnd32((rnd32((rnd32(w) * rnd32(w))) * rnd32(r)))
10: rnd32((rnd32((rnd32((rnd32(w) * rnd32(w))) * rnd32(r))) * rnd32(r)))
11: rnd32((rnd[float32,ne,1.00,0,-150](((1/8) * rnd[float32,ne,1.00,-24,0]((3 - (2 * rnd32(v)))))) * rnd32((rnd32((rnd32((rnd32(w) * rnd32(w))) * rnd32(r))) * rnd32(r)))))
12: rnd[float32,ne,1.00,-24,0]((1 - rnd32(v)))
13: rnd32((rnd32((rnd[float32,ne,1.00,0,-150](((1/8) * rnd[float32,ne,1.00,-24,0]((3 - (2 * rnd32(v)))))) * rnd32((rnd32((rnd32((rnd32(w) * rnd32(w))) * rnd32(r))) * rnd32(r))))) / rnd[float32,ne,1.00,-24,0]((1 - rnd32(v)))))
14: rnd[float32,ne,1.00,-24,0]((rnd[float32,ne,1.00,-24,0]((3 + rnd32((2 / rnd32((rnd32(r) * rnd32(r))))))) - rnd32((rnd32((rnd[float32,ne,1.00,0,-150](((1/8) * rnd[float32,ne,1.00,-24,0]((3 - (2 * rnd32(v)))))) * rnd32((rnd32((rnd32((rnd32(w) * rnd32(w))) * rnd32(r))) * rnd32(r))))) / rnd[float32,ne,1.00,-24,0]((1 - rnd32(v)))))))
15: rnd[float32,ne,1.00,-24,0]((rnd[float32,ne,1.00,-24,0]((rnd[float32,ne,1.00,-24,0]((3 + rnd32((2 / rnd32((rnd32(r) * rnd32(r))))))) - rnd32((rnd32((rnd[float32,ne,1.00,0,-150](((1/8) * rnd[float32,ne,1.00,-24,0]((3 - (2 * rnd32(v)))))) * rnd32((rnd32((rnd32((rnd32(w) * rnd32(w))) * rnd32(r))) * rnd32(r))))) / rnd[float32,ne,1.00,-24,0]((1 - rnd32(v))))))) - (9/2)))

bounds: [-1.868121e+01, -1.964038e+00]

Computing absolute errors
-1: exp = -24: 2.860543e-04 (low = 2.860543e-04, subopt = 0.0%)

Solving the exact optimization problem
exact bound (exp = -24): 1.503766e+02 (low = 1.475998e+02, subopt = 1.8%)
total2: 1.705016e-11 (low = 1.705016e-11, subopt = 0.0%)
exact total: 8.963162e-06 (low = 8.797649e-06, subopt = 1.8%)

Computing relative errors
-1: exp = -24: 2.860543e-04 (low = 2.860543e-04, subopt = 0.0%)

Solving the exact optimization problem
exact bound-rel (exp = -24): 9.482706e+00 (low = 9.107862e+00, subopt = 4.0%)
total2: 8.681180e-12 (low = 9.126906e-13, subopt = 89.5%)
exact total-rel: 5.652220e-07 (low = 5.428718e-07, subopt = 4.0%)

Elapsed time: 8.57105
*************************************

-------------------------------------------------------------------------------
Problem: turbine1

Optimization lower bounds for error models:
The absolute error model (exact): 8.797649e-06 (suboptimality = 1.8%)
The relative error model (exact): 5.428718e-07 (suboptimality = 4.0%)

Bounds (without rounding): [-1.868121e+01, -1.964038e+00]
Bounds (floating-point): [-1.86812178846155134693e+01, -1.96402869989548167773e+00]

Absolute error (exact): 8.963162e-06
Relative error (exact): 5.652220e-07

Elapsed time: 8.57


