Loading configuration file: /home/roki/GIT/FPTaylor/./default.cfg
FPTaylor, version 0.9.3+dev

Loading: /home/roki/GIT/FPTaylor/benchmarks/probability/bspline2.txt
Processing: bspline2

*************************************
Taylor form for: rnd32((rnd32((rnd32((rnd32((rnd32((rnd32((-(rnd32(3)))) * rnd32((rnd32(t) * rnd32((rnd32(t) * rnd32(t))))))) + rnd32((rnd32(3) * rnd32((rnd32(t) * rnd32(t))))))) + rnd32((rnd32(3) * rnd32(t))))) + rnd32(1))) * rnd32((rnd32(1) / rnd32(6)))))

Conservative bound: [-0.333334, 1.166667]

Simplified rounding: rnd32((rnd[float32,ne,1.00,-24,0]((rnd[float32,ne,1.00,-24,0]((rnd[float32,ne,1.00,-24,0]((rnd32(((-(3)) * rnd32((rnd32(t) * rnd32((rnd32(t) * rnd32(t))))))) + rnd32((3 * rnd32((rnd32(t) * rnd32(t))))))) + rnd32((3 * rnd32(t))))) + 1)) * rnd32((1 / 6))))
Building Taylor forms...
Simplifying Taylor forms...
success
v0 = ((((((-(3)) * (t * (t * t))) + (3 * (t * t))) + (3 * t)) + 1) * (1 * (1 / 6)))
-1 (56): exp = -24: (5629499576156169/18889465931478580854784)
1 (3): exp = -24: (((((((1 * (1 / 6)) * ((-(3)) * (t * (t * floor_power2(t))))) + ((1 * (1 / 6)) * ((-(3)) * (t * (t * floor_power2(t)))))) + ((1 * (1 / 6)) * ((-(3)) * ((t * t) * floor_power2(t))))) + ((1 * (1 / 6)) * (3 * (t * floor_power2(t))))) + ((1 * (1 / 6)) * (3 * (t * floor_power2(t))))) + ((1 * (1 / 6)) * (3 * floor_power2(t))))
2 (5): exp = -24: (((1 * (1 / 6)) * ((-(3)) * (t * floor_power2(((t * t) + interval(-5.96046456635690447001e-08, 5.96046456635690447001e-08)))))) + ((1 * (1 / 6)) * (3 * floor_power2(((t * t) + interval(-5.96046456635690447001e-08, 5.96046456635690447001e-08))))))
3 (8): exp = -24: ((1 * (1 / 6)) * ((-(3)) * floor_power2(((t * (t * t)) + interval(-1.49011616379368713940e-07, 1.49011616379368713940e-07)))))
4 (11): exp = -24: ((1 * (1 / 6)) * floor_power2((((-(3)) * (t * (t * t))) + interval(-6.25848783464277963881e-07, 6.25848783464277963881e-07))))
5 (19): exp = -24: ((1 * (1 / 6)) * floor_power2(((3 * (t * t)) + interval(-3.57627871316879062040e-07, 3.57627871316879062040e-07))))
6 (21): exp = -24: ((1 * (1 / 6)) * floor_power2(((((-(3)) * (t * (t * t))) + (3 * (t * t))) + interval(-1.22189523388272000238e-06, 1.22189523388272000238e-06))))
7 (25): exp = -24: ((1 * (1 / 6)) * floor_power2(((3 * t) + interval(-8.94069671630859375000e-08, 8.94069671630859375000e-08))))
8 (27): exp = -24: ((1 * (1 / 6)) * floor_power2((((((-(3)) * (t * (t * t))) + (3 * (t * t))) + (3 * t)) + interval(-1.54972078014736843988e-06, 1.54972078014736843988e-06))))
9 (29): exp = -24: ((1 * (1 / 6)) * floor_power2(((((((-(3)) * (t * (t * t))) + (3 * (t * t))) + (3 * t)) + 1) + interval(-1.78813935924893093988e-06, 1.78813935924893093988e-06))))
10 (33): exp = -24: ((((((-(3)) * (t * (t * t))) + (3 * (t * t))) + (3 * t)) + 1) * floor_power2(((1 * (1 / 6)) + 0)))
11 (36): exp = -24: floor_power2((((((((-(3)) * (t * (t * t))) + (3 * (t * t))) + (3 * t)) + 1) * (1 * (1 / 6))) + interval(-3.89913735669249279586e-07, 3.89913735669249279586e-07)))

Corresponding original subexpressions:
1: rnd32(t)
2: rnd32((rnd32(t) * rnd32(t)))
3: rnd32((rnd32(t) * rnd32((rnd32(t) * rnd32(t)))))
4: rnd32(((-(3)) * rnd32((rnd32(t) * rnd32((rnd32(t) * rnd32(t)))))))
5: rnd32((3 * rnd32((rnd32(t) * rnd32(t)))))
6: rnd[float32,ne,1.00,-24,0]((rnd32(((-(3)) * rnd32((rnd32(t) * rnd32((rnd32(t) * rnd32(t))))))) + rnd32((3 * rnd32((rnd32(t) * rnd32(t)))))))
7: rnd32((3 * rnd32(t)))
8: rnd[float32,ne,1.00,-24,0]((rnd[float32,ne,1.00,-24,0]((rnd32(((-(3)) * rnd32((rnd32(t) * rnd32((rnd32(t) * rnd32(t))))))) + rnd32((3 * rnd32((rnd32(t) * rnd32(t))))))) + rnd32((3 * rnd32(t)))))
9: rnd[float32,ne,1.00,-24,0]((rnd[float32,ne,1.00,-24,0]((rnd[float32,ne,1.00,-24,0]((rnd32(((-(3)) * rnd32((rnd32(t) * rnd32((rnd32(t) * rnd32(t))))))) + rnd32((3 * rnd32((rnd32(t) * rnd32(t))))))) + rnd32((3 * rnd32(t))))) + 1))
10: rnd32((1 / 6))
11: rnd32((rnd[float32,ne,1.00,-24,0]((rnd[float32,ne,1.00,-24,0]((rnd[float32,ne,1.00,-24,0]((rnd32(((-(3)) * rnd32((rnd32(t) * rnd32((rnd32(t) * rnd32(t))))))) + rnd32((3 * rnd32((rnd32(t) * rnd32(t))))))) + rnd32((3 * rnd32(t))))) + 1)) * rnd32((1 / 6))))

bounds: [1.588542e-01, 6.782941e-01]

Computing absolute errors
-1: exp = -24: 2.980232e-07 (low = 2.980232e-07, subopt = 0.0%)

Solving the exact optimization problem
exact bound (exp = -24): 3.782763e+00 (low = 3.091878e+00, subopt = 18.3%)
total2: 1.776357e-14 (low = 1.776357e-14, subopt = 0.0%)
exact total: 2.254703e-07 (low = 1.842903e-07, subopt = 18.3%)

Computing relative errors
-1: exp = -24: 2.980232e-07 (low = 2.980232e-07, subopt = 0.0%)

Solving the exact optimization problem
exact bound-rel (exp = -24): 5.775401e+00 (low = 4.742012e+00, subopt = 17.9%)
total2: 1.118231e-13 (low = 2.618859e-14, subopt = 76.6%)
exact total-rel: 3.442409e-07 (low = 2.826460e-07, subopt = 17.9%)

Elapsed time: 0.66174
*************************************

-------------------------------------------------------------------------------
Problem: bspline2

Optimization lower bounds for error models:
The absolute error model (exact): 1.842903e-07 (suboptimality = 18.3%)
The relative error model (exact): 2.826460e-07 (suboptimality = 17.9%)

Bounds (without rounding): [1.588542e-01, 6.782941e-01]
Bounds (floating-point): [1.58853941196383602330e-01, 6.78294327821154063862e-01]

Absolute error (exact): 2.254703e-07
Relative error (exact): 3.442409e-07

Elapsed time: 0.66


