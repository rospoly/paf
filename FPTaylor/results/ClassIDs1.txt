Loading configuration file: /home/roki/GIT/FPTaylor/./default.cfg
FPTaylor, version 0.9.3+dev

Loading: /home/roki/GIT/FPTaylor/benchmarks/probability/ClassIDs1.txt
Processing: classids1

*************************************
Taylor form for: rnd32((rnd32((rnd32((rnd32((rnd32((rnd32((18424469636214999/100000000000000000)) * rnd32(atts0))) + rnd32((rnd32((45123431334216657/100000000000000000)) * rnd32(atts1))))) + rnd32((rnd32((-(rnd32((80794264540764449/100000000000000000))))) * rnd32(atts2))))) + rnd32((rnd32((-(rnd32((5633890816800119/12500000000000000))))) * rnd32(atts3))))) - rnd32((rnd32((rnd32((rnd32((rnd32((10420050612805791/200000000000000000)) * rnd32(atts0))) + rnd32((rnd32((-(rnd32((1117792738975983/1250000000000000))))) * rnd32(atts1))))) + rnd32((rnd32((40478255170032273/100000000000000000)) * rnd32(atts2))))) + rnd32((rnd32((-(rnd32((23443672549426059/25000000000000000))))) * rnd32(atts3)))))))

Conservative bound: [-12.540460, 14.387526]

Simplified rounding: rnd[float32,ne,1.00,-24,0]((rnd[float32,ne,1.00,-24,0]((rnd[float32,ne,1.00,-24,0]((rnd[float32,ne,1.00,-24,0]((rnd32((rnd32((18424469636214999/100000000000000000)) * rnd32(atts0))) + rnd32((rnd32((45123431334216657/100000000000000000)) * rnd32(atts1))))) + rnd32(((-(rnd32((80794264540764449/100000000000000000)))) * rnd32(atts2))))) + rnd32(((-(rnd32((5633890816800119/12500000000000000)))) * rnd32(atts3))))) - rnd[float32,ne,1.00,-24,0]((rnd[float32,ne,1.00,-24,0]((rnd[float32,ne,1.00,-24,0]((rnd32((rnd32((10420050612805791/200000000000000000)) * rnd32(atts0))) + rnd32(((-(rnd32((1117792738975983/1250000000000000)))) * rnd32(atts1))))) + rnd32((rnd32((40478255170032273/100000000000000000)) * rnd32(atts2))))) + rnd32(((-(rnd32((23443672549426059/25000000000000000)))) * rnd32(atts3)))))))
Building Taylor forms...
Simplifying Taylor forms...
success
v0 = ((((((18424469636214999/100000000000000000) * atts0) + ((45123431334216657/100000000000000000) * atts1)) + ((-((80794264540764449/100000000000000000))) * atts2)) + ((-((5633890816800119/12500000000000000))) * atts3)) - (((((10420050612805791/200000000000000000) * atts0) + ((-((1117792738975983/1250000000000000))) * atts1)) + ((40478255170032273/100000000000000000) * atts2)) + ((-((23443672549426059/25000000000000000))) * atts3)))
-1 (76): exp = -24: (455371238403741/1180591620717411303424)
1 (1): exp = -24: ((((((((atts0 * (51667941747/762939453125)) + (atts1 * (63405167317/1525878906250))) + (atts2 * (-((211803786972/762939453125))))) + (atts3 * (-((-377945309413/1525878906250))))) + (-((atts0 * (144163520609/12207031250000))))) + (-((atts1 * (-((27469688184/152587890625))))))) + (-((atts2 * (-300739316237/1525878906250))))) + (-((atts3 * (-((250091298458/762939453125)))))))
2 (2): exp = -24: (((18424469636214999/100000000000000000) * floor_power2(atts0)) + (-(((10420050612805791/200000000000000000) * floor_power2(atts0)))))
3 (4): exp = -24: floor_power2((((18424469636214999/100000000000000000) * atts0) + interval(-1.24183740892965458142e-07, 1.24183740892965458142e-07)))
4 (7): exp = -24: (((45123431334216657/100000000000000000) * floor_power2(atts1)) + (-(((-((1117792738975983/1250000000000000))) * floor_power2(atts1)))))
5 (9): exp = -24: floor_power2((((45123431334216657/100000000000000000) * atts1) + interval(-1.19966466161016781056e-07, 1.19966466161016781056e-07)))
6 (11): exp = -24: floor_power2(((((18424469636214999/100000000000000000) * atts0) + ((45123431334216657/100000000000000000) * atts1)) + interval(-4.22964141380154220077e-07, 4.22964141380154220077e-07)))
7 (14): exp = -24: (((-((80794264540764449/100000000000000000))) * floor_power2(atts2)) + (-(((40478255170032273/100000000000000000) * floor_power2(atts2)))))
8 (16): exp = -24: floor_power2((((-((80794264540764449/100000000000000000))) * atts2) + interval(-5.50728791489477381573e-07, 5.50728791489477381573e-07)))
9 (18): exp = -24: floor_power2((((((18424469636214999/100000000000000000) * atts0) + ((45123431334216657/100000000000000000) * atts1)) + ((-((80794264540764449/100000000000000000))) * atts2)) + interval(-1.56973938062353875162e-06, 1.56973938062353875162e-06)))
10 (21): exp = -24: (((-((5633890816800119/12500000000000000))) * floor_power2(atts3)) + (-(((-((23443672549426059/25000000000000000))) * floor_power2(atts3)))))
11 (23): exp = -24: floor_power2((((-((5633890816800119/12500000000000000))) * atts3) + interval(-1.05401181765446627986e-07, 1.05401181765446627986e-07)))
12 (25): exp = -24: floor_power2(((((((18424469636214999/100000000000000000) * atts0) + ((45123431334216657/100000000000000000) * atts1)) + ((-((80794264540764449/100000000000000000))) * atts2)) + ((-((5633890816800119/12500000000000000))) * atts3)) + interval(-1.97316378626593842520e-06, 1.97316378626593842520e-06)))
13 (30): exp = -24: (-(floor_power2((((10420050612805791/200000000000000000) * atts0) + interval(-3.11786479126347762823e-08, 3.11786479126347762823e-08)))))
14 (35): exp = -24: (-(floor_power2((((-((1117792738975983/1250000000000000))) * atts1) + interval(-2.66853782538047231392e-07, 2.66853782538047231392e-07)))))
15 (37): exp = -24: (-(floor_power2(((((10420050612805791/200000000000000000) * atts0) + ((-((1117792738975983/1250000000000000))) * atts1)) + interval(-5.51352170746092514649e-07, 5.51352170746092514649e-07)))))
16 (42): exp = -24: (-(floor_power2((((40478255170032273/100000000000000000) * atts2) + interval(-3.10491662649775878128e-07, 3.10491662649775878128e-07)))))
17 (44): exp = -24: (-(floor_power2((((((10420050612805791/200000000000000000) * atts0) + ((-((1117792738975983/1250000000000000))) * atts1)) + ((40478255170032273/100000000000000000) * atts2)) + interval(-1.33868099159899371041e-06, 1.33868099159899371041e-06)))))
18 (49): exp = -24: (-(floor_power2((((-((23443672549426059/25000000000000000))) * atts3) + interval(-1.80172483714395461207e-07, 1.80172483714395461207e-07)))))
19 (51): exp = -24: (-(floor_power2(((((((10420050612805791/200000000000000000) * atts0) + ((-((1117792738975983/1250000000000000))) * atts1)) + ((40478255170032273/100000000000000000) * atts2)) + ((-((23443672549426059/25000000000000000))) * atts3)) + interval(-1.87648134396573310691e-06, 1.87648134396573310691e-06)))))
20 (53): exp = -24: floor_power2((((((((18424469636214999/100000000000000000) * atts0) + ((45123431334216657/100000000000000000) * atts1)) + ((-((80794264540764449/100000000000000000))) * atts2)) + ((-((5633890816800119/12500000000000000))) * atts3)) - (((((10420050612805791/200000000000000000) * atts0) + ((-((1117792738975983/1250000000000000))) * atts1)) + ((40478255170032273/100000000000000000) * atts2)) + ((-((23443672549426059/25000000000000000))) * atts3))) + interval(-4.80331944663792576727e-06, 4.80331944663792576727e-06)))

Corresponding original subexpressions:
1: rnd32(0)
2: rnd32(atts0)
3: rnd32((rnd32((18424469636214999/100000000000000000)) * rnd32(atts0)))
4: rnd32(atts1)
5: rnd32((rnd32((45123431334216657/100000000000000000)) * rnd32(atts1)))
6: rnd[float32,ne,1.00,-24,0]((rnd32((rnd32((18424469636214999/100000000000000000)) * rnd32(atts0))) + rnd32((rnd32((45123431334216657/100000000000000000)) * rnd32(atts1)))))
7: rnd32(atts2)
8: rnd32(((-(rnd32((80794264540764449/100000000000000000)))) * rnd32(atts2)))
9: rnd[float32,ne,1.00,-24,0]((rnd[float32,ne,1.00,-24,0]((rnd32((rnd32((18424469636214999/100000000000000000)) * rnd32(atts0))) + rnd32((rnd32((45123431334216657/100000000000000000)) * rnd32(atts1))))) + rnd32(((-(rnd32((80794264540764449/100000000000000000)))) * rnd32(atts2)))))
10: rnd32(atts3)
11: rnd32(((-(rnd32((5633890816800119/12500000000000000)))) * rnd32(atts3)))
12: rnd[float32,ne,1.00,-24,0]((rnd[float32,ne,1.00,-24,0]((rnd[float32,ne,1.00,-24,0]((rnd32((rnd32((18424469636214999/100000000000000000)) * rnd32(atts0))) + rnd32((rnd32((45123431334216657/100000000000000000)) * rnd32(atts1))))) + rnd32(((-(rnd32((80794264540764449/100000000000000000)))) * rnd32(atts2))))) + rnd32(((-(rnd32((5633890816800119/12500000000000000)))) * rnd32(atts3)))))
13: rnd32((rnd32((10420050612805791/200000000000000000)) * rnd32(atts0)))
14: rnd32(((-(rnd32((1117792738975983/1250000000000000)))) * rnd32(atts1)))
15: rnd[float32,ne,1.00,-24,0]((rnd32((rnd32((10420050612805791/200000000000000000)) * rnd32(atts0))) + rnd32(((-(rnd32((1117792738975983/1250000000000000)))) * rnd32(atts1)))))
16: rnd32((rnd32((40478255170032273/100000000000000000)) * rnd32(atts2)))
17: rnd[float32,ne,1.00,-24,0]((rnd[float32,ne,1.00,-24,0]((rnd32((rnd32((10420050612805791/200000000000000000)) * rnd32(atts0))) + rnd32(((-(rnd32((1117792738975983/1250000000000000)))) * rnd32(atts1))))) + rnd32((rnd32((40478255170032273/100000000000000000)) * rnd32(atts2)))))
18: rnd32(((-(rnd32((23443672549426059/25000000000000000)))) * rnd32(atts3)))
19: rnd[float32,ne,1.00,-24,0]((rnd[float32,ne,1.00,-24,0]((rnd[float32,ne,1.00,-24,0]((rnd32((rnd32((10420050612805791/200000000000000000)) * rnd32(atts0))) + rnd32(((-(rnd32((1117792738975983/1250000000000000)))) * rnd32(atts1))))) + rnd32((rnd32((40478255170032273/100000000000000000)) * rnd32(atts2))))) + rnd32(((-(rnd32((23443672549426059/25000000000000000)))) * rnd32(atts3)))))
20: rnd[float32,ne,1.00,-24,0]((rnd[float32,ne,1.00,-24,0]((rnd[float32,ne,1.00,-24,0]((rnd[float32,ne,1.00,-24,0]((rnd32((rnd32((18424469636214999/100000000000000000)) * rnd32(atts0))) + rnd32((rnd32((45123431334216657/100000000000000000)) * rnd32(atts1))))) + rnd32(((-(rnd32((80794264540764449/100000000000000000)))) * rnd32(atts2))))) + rnd32(((-(rnd32((5633890816800119/12500000000000000)))) * rnd32(atts3))))) - rnd[float32,ne,1.00,-24,0]((rnd[float32,ne,1.00,-24,0]((rnd[float32,ne,1.00,-24,0]((rnd32((rnd32((10420050612805791/200000000000000000)) * rnd32(atts0))) + rnd32(((-(rnd32((1117792738975983/1250000000000000)))) * rnd32(atts1))))) + rnd32((rnd32((40478255170032273/100000000000000000)) * rnd32(atts2))))) + rnd32(((-(rnd32((23443672549426059/25000000000000000)))) * rnd32(atts3)))))))

bounds: [-1.023623e+01, 1.208329e+01]

Computing absolute errors
-1: exp = -24: 3.857144e-07 (low = 3.857144e-07, subopt = 0.0%)

Solving the exact optimization problem
exact bound (exp = -24): 6.071442e+01 (low = 6.021624e+01, subopt = 0.8%)
total2: 2.299037e-14 (low = 2.299037e-14, subopt = 0.0%)
exact total: 3.618862e-06 (low = 3.589168e-06, subopt = 0.8%)

Computing relative errors
**WARNING**: 
Cannot compute the relative error: values of the function are close to zero

**WARNING**: 0.00000000000000000000000000000000000000000000000000100000000000000000761622370578234285759930916419271389895138472837095389481447900651438935953211746691245522253373491061798089161657965284746296674711629748344421386718750000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000

Elapsed time: 0.45130
*************************************

-------------------------------------------------------------------------------
Problem: classids1

Optimization lower bounds for error models:
The absolute error model (exact): 3.589168e-06 (suboptimality = 0.8%)

Bounds (without rounding): [-1.023623e+01, 1.208329e+01]
Bounds (floating-point): [-1.02362301744647137269e+01, 1.20832962881602039573e+01]

Absolute error (exact): 3.618862e-06

Elapsed time: 0.45


