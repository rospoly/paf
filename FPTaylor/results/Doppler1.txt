Loading configuration file: /home/roki/GIT/FPTaylor/./default.cfg
FPTaylor, version 0.9.3+dev

Loading: /home/roki/GIT/FPTaylor/benchmarks/probability/Doppler.txt
Processing: doppler

*************************************
Taylor form for: rnd32((rnd32((-(rnd32((rnd32((rnd32((1657/5)) + rnd32((rnd32((3/5)) * rnd32(t))))) * rnd32(v)))))) / rnd32((rnd32((rnd32((rnd32((1657/5)) + rnd32((rnd32((3/5)) * rnd32(t))))) + rnd32(u))) * rnd32((rnd32((rnd32((1657/5)) + rnd32((rnd32((3/5)) * rnd32(t))))) + rnd32(u)))))))

Conservative bound: [-158.719302, -0.029442]

Simplified rounding: rnd32(((-(rnd32((rnd[float32,ne,1.00,-24,0]((rnd32((1657/5)) + rnd32((rnd32((3/5)) * rnd32(t))))) * rnd32(v))))) / rnd32((rnd[float32,ne,1.00,-24,0]((rnd[float32,ne,1.00,-24,0]((rnd32((1657/5)) + rnd32((rnd32((3/5)) * rnd32(t))))) + rnd32(u))) * rnd[float32,ne,1.00,-24,0]((rnd[float32,ne,1.00,-24,0]((rnd32((1657/5)) + rnd32((rnd32((3/5)) * rnd32(t))))) + rnd32(u)))))))
Building Taylor forms...
Simplifying Taylor forms...
success
v0 = ((-((((1657/5) + ((3/5) * t)) * v))) * (1 / ((((1657/5) + ((3/5) * t)) + u) * (((1657/5) + ((3/5) * t)) + u))))
-1 (58): exp = -24: (4068637923457797/1152921504606846976)
1 (24): exp = -24: (((((((-((((1657/5) + ((3/5) * t)) * v))) * (-((((((1657/5) + ((3/5) * t)) + u) * (512/5)) / (((((1657/5) + ((3/5) * t)) + u) * (((1657/5) + ((3/5) * t)) + u)) * ((((1657/5) + ((3/5) * t)) + u) * (((1657/5) + ((3/5) * t)) + u))))))) + ((-((((1657/5) + ((3/5) * t)) * v))) * (-((((((1657/5) + ((3/5) * t)) + u) * (t * (-2/5))) / (((((1657/5) + ((3/5) * t)) + u) * (((1657/5) + ((3/5) * t)) + u)) * ((((1657/5) + ((3/5) * t)) + u) * (((1657/5) + ((3/5) * t)) + u)))))))) + ((-((((1657/5) + ((3/5) * t)) * v))) * (-((((((1657/5) + ((3/5) * t)) + u) * (512/5)) / (((((1657/5) + ((3/5) * t)) + u) * (((1657/5) + ((3/5) * t)) + u)) * ((((1657/5) + ((3/5) * t)) + u) * (((1657/5) + ((3/5) * t)) + u)))))))) + ((-((((1657/5) + ((3/5) * t)) * v))) * (-((((((1657/5) + ((3/5) * t)) + u) * (t * (-2/5))) / (((((1657/5) + ((3/5) * t)) + u) * (((1657/5) + ((3/5) * t)) + u)) * ((((1657/5) + ((3/5) * t)) + u) * (((1657/5) + ((3/5) * t)) + u)))))))) + ((1 / ((((1657/5) + ((3/5) * t)) + u) * (((1657/5) + ((3/5) * t)) + u))) * (-((v * (512/5)))))) + ((1 / ((((1657/5) + ((3/5) * t)) + u) * (((1657/5) + ((3/5) * t)) + u))) * (-((v * (t * (-2/5)))))))
2 (26): exp = -24: ((((-((((1657/5) + ((3/5) * t)) * v))) * (-((((((1657/5) + ((3/5) * t)) + u) * ((3/5) * floor_power2(t))) / (((((1657/5) + ((3/5) * t)) + u) * (((1657/5) + ((3/5) * t)) + u)) * ((((1657/5) + ((3/5) * t)) + u) * (((1657/5) + ((3/5) * t)) + u))))))) + ((-((((1657/5) + ((3/5) * t)) * v))) * (-((((((1657/5) + ((3/5) * t)) + u) * ((3/5) * floor_power2(t))) / (((((1657/5) + ((3/5) * t)) + u) * (((1657/5) + ((3/5) * t)) + u)) * ((((1657/5) + ((3/5) * t)) + u) * (((1657/5) + ((3/5) * t)) + u)))))))) + ((1 / ((((1657/5) + ((3/5) * t)) + u) * (((1657/5) + ((3/5) * t)) + u))) * (-((v * ((3/5) * floor_power2(t)))))))
3 (28): exp = -24: ((((-((((1657/5) + ((3/5) * t)) * v))) * (-((((((1657/5) + ((3/5) * t)) + u) * floor_power2((((3/5) * t) + interval(-2.33650212067004801216e-06, 2.33650212067004801216e-06)))) / (((((1657/5) + ((3/5) * t)) + u) * (((1657/5) + ((3/5) * t)) + u)) * ((((1657/5) + ((3/5) * t)) + u) * (((1657/5) + ((3/5) * t)) + u))))))) + ((-((((1657/5) + ((3/5) * t)) * v))) * (-((((((1657/5) + ((3/5) * t)) + u) * floor_power2((((3/5) * t) + interval(-2.33650212067004801216e-06, 2.33650212067004801216e-06)))) / (((((1657/5) + ((3/5) * t)) + u) * (((1657/5) + ((3/5) * t)) + u)) * ((((1657/5) + ((3/5) * t)) + u) * (((1657/5) + ((3/5) * t)) + u)))))))) + ((1 / ((((1657/5) + ((3/5) * t)) + u) * (((1657/5) + ((3/5) * t)) + u))) * (-((v * floor_power2((((3/5) * t) + interval(-2.33650212067004801216e-06, 2.33650212067004801216e-06))))))))
4 (30): exp = -24: ((((-((((1657/5) + ((3/5) * t)) * v))) * (-((((((1657/5) + ((3/5) * t)) + u) * floor_power2((((1657/5) + ((3/5) * t)) + interval(-9.39369206207629962153e-06, 9.39369206207629962153e-06)))) / (((((1657/5) + ((3/5) * t)) + u) * (((1657/5) + ((3/5) * t)) + u)) * ((((1657/5) + ((3/5) * t)) + u) * (((1657/5) + ((3/5) * t)) + u))))))) + ((-((((1657/5) + ((3/5) * t)) * v))) * (-((((((1657/5) + ((3/5) * t)) + u) * floor_power2((((1657/5) + ((3/5) * t)) + interval(-9.39369206207629962153e-06, 9.39369206207629962153e-06)))) / (((((1657/5) + ((3/5) * t)) + u) * (((1657/5) + ((3/5) * t)) + u)) * ((((1657/5) + ((3/5) * t)) + u) * (((1657/5) + ((3/5) * t)) + u)))))))) + ((1 / ((((1657/5) + ((3/5) * t)) + u) * (((1657/5) + ((3/5) * t)) + u))) * (-((v * floor_power2((((1657/5) + ((3/5) * t)) + interval(-9.39369206207629962153e-06, 9.39369206207629962153e-06))))))))
5 (9): exp = -24: ((1 / ((((1657/5) + ((3/5) * t)) + u) * (((1657/5) + ((3/5) * t)) + u))) * (-((((1657/5) + ((3/5) * t)) * floor_power2(v)))))
6 (11): exp = -24: ((1 / ((((1657/5) + ((3/5) * t)) + u) * (((1657/5) + ((3/5) * t)) + u))) * (-(floor_power2(((((1657/5) + ((3/5) * t)) * v) + interval(-8.45979334066214727628e-01, 8.45979334066214727628e-01))))))
7 (32): exp = -24: (((-((((1657/5) + ((3/5) * t)) * v))) * (-((((((1657/5) + ((3/5) * t)) + u) * floor_power2(u)) / (((((1657/5) + ((3/5) * t)) + u) * (((1657/5) + ((3/5) * t)) + u)) * ((((1657/5) + ((3/5) * t)) + u) * (((1657/5) + ((3/5) * t)) + u))))))) + ((-((((1657/5) + ((3/5) * t)) * v))) * (-((((((1657/5) + ((3/5) * t)) + u) * floor_power2(u)) / (((((1657/5) + ((3/5) * t)) + u) * (((1657/5) + ((3/5) * t)) + u)) * ((((1657/5) + ((3/5) * t)) + u) * (((1657/5) + ((3/5) * t)) + u))))))))
8 (33): exp = -24: (((-((((1657/5) + ((3/5) * t)) * v))) * (-((((((1657/5) + ((3/5) * t)) + u) * floor_power2(((((1657/5) + ((3/5) * t)) + u) + interval(-2.84671783902013030097e-05, 2.84671783902013030097e-05)))) / (((((1657/5) + ((3/5) * t)) + u) * (((1657/5) + ((3/5) * t)) + u)) * ((((1657/5) + ((3/5) * t)) + u) * (((1657/5) + ((3/5) * t)) + u))))))) + ((-((((1657/5) + ((3/5) * t)) * v))) * (-((((((1657/5) + ((3/5) * t)) + u) * floor_power2(((((1657/5) + ((3/5) * t)) + u) + interval(-2.84671783902013030097e-05, 2.84671783902013030097e-05)))) / (((((1657/5) + ((3/5) * t)) + u) * (((1657/5) + ((3/5) * t)) + u)) * ((((1657/5) + ((3/5) * t)) + u) * (((1657/5) + ((3/5) * t)) + u))))))))
9 (36): exp = -24: ((-((((1657/5) + ((3/5) * t)) * v))) * (-((floor_power2((((((1657/5) + ((3/5) * t)) + u) * (((1657/5) + ((3/5) * t)) + u)) + interval(-4.03503246773130180847e-02, 4.03503246773130180847e-02))) / (((((1657/5) + ((3/5) * t)) + u) * (((1657/5) + ((3/5) * t)) + u)) * ((((1657/5) + ((3/5) * t)) + u) * (((1657/5) + ((3/5) * t)) + u)))))))
10 (40): exp = -24: floor_power2((((-((((1657/5) + ((3/5) * t)) * v))) * (1 / ((((1657/5) + ((3/5) * t)) + u) * (((1657/5) + ((3/5) * t)) + u)))) + interval(-1.91928751684421124461e-04, 1.91928751684421124461e-04)))

Corresponding original subexpressions:
1: rnd32(0)
2: rnd32(t)
3: rnd32((rnd32((3/5)) * rnd32(t)))
4: rnd[float32,ne,1.00,-24,0]((rnd32((1657/5)) + rnd32((rnd32((3/5)) * rnd32(t)))))
5: rnd32(v)
6: rnd32((rnd[float32,ne,1.00,-24,0]((rnd32((1657/5)) + rnd32((rnd32((3/5)) * rnd32(t))))) * rnd32(v)))
7: rnd32(u)
8: rnd[float32,ne,1.00,-24,0]((rnd[float32,ne,1.00,-24,0]((rnd32((1657/5)) + rnd32((rnd32((3/5)) * rnd32(t))))) + rnd32(u)))
9: rnd32((rnd[float32,ne,1.00,-24,0]((rnd[float32,ne,1.00,-24,0]((rnd32((1657/5)) + rnd32((rnd32((3/5)) * rnd32(t))))) + rnd32(u))) * rnd[float32,ne,1.00,-24,0]((rnd[float32,ne,1.00,-24,0]((rnd32((1657/5)) + rnd32((rnd32((3/5)) * rnd32(t))))) + rnd32(u)))))
10: rnd32(((-(rnd32((rnd[float32,ne,1.00,-24,0]((rnd32((1657/5)) + rnd32((rnd32((3/5)) * rnd32(t))))) * rnd32(v))))) / rnd32((rnd[float32,ne,1.00,-24,0]((rnd[float32,ne,1.00,-24,0]((rnd32((1657/5)) + rnd32((rnd32((3/5)) * rnd32(t))))) + rnd32(u))) * rnd[float32,ne,1.00,-24,0]((rnd[float32,ne,1.00,-24,0]((rnd32((1657/5)) + rnd32((rnd32((3/5)) * rnd32(t))))) + rnd32(u)))))))

bounds: [-1.389561e+02, -3.169713e-02]

Computing absolute errors
-1: exp = -24: 3.528981e-03 (low = 3.528981e-03, subopt = 0.0%)

Solving the exact optimization problem
exact bound (exp = -24): 1.023739e+03 (low = 1.016433e+03, subopt = 0.7%)
total2: 2.103437e-10 (low = 2.103437e-10, subopt = 0.0%)
exact total: 6.101980e-05 (low = 6.058434e-05, subopt = 0.7%)

Computing relative errors
-1: exp = -24: 3.528981e-03 (low = 3.528981e-03, subopt = 0.0%)

Solving the exact optimization problem
exact bound-rel (exp = -24): 9.457590e+00 (low = 8.071405e+00, subopt = 14.7%)
total2: 6.636048e-09 (low = 1.513742e-12, subopt = 100.0%)
exact total-rel: 5.703523e-07 (low = 4.810947e-07, subopt = 15.6%)
**WARNING**: Large second-order error: 6.636048e-09 (first-order = 5.637163e-07)
**WARNING**: Try intermediate-opt = true or manually split intervals of input variables.

Elapsed time: 82.97728
*************************************

-------------------------------------------------------------------------------
Problem: doppler

Optimization lower bounds for error models:
The absolute error model (exact): 6.058434e-05 (suboptimality = 0.7%)
The relative error model (exact): 4.810947e-07 (suboptimality = 15.6%)

Bounds (without rounding): [-1.389561e+02, -3.169713e-02]
Bounds (floating-point): [-1.38956168632608438429e+02, -3.16361067356379296878e-02]

Absolute error (exact): 6.101980e-05
Relative error (exact): 5.703523e-07

Elapsed time: 82.98


