***** The environment variable FPTAYLOR_BASE is defined = '/home/roki/GIT/FPTaylor'
Loading configuration file: /home/roki/GIT/FPTaylor/default.cfg
FPTaylor, version 0.9.3+dev

Loading: /home/roki/GIT/paf/FPTaylor/Doppler2.txt
Processing: doppler2

*************************************
Taylor form for: rnd32((rnd32((rnd32((-(rnd32((rnd32((1657/5)) + rnd32((rnd32((3/5)) * rnd32(T)))))))) * rnd32(v))) / rnd32((rnd32((rnd32((rnd32((1657/5)) + rnd32((rnd32((3/5)) * rnd32(T))))) + rnd32(u))) * rnd32((rnd32((rnd32((1657/5)) + rnd32((rnd32((3/5)) * rnd32(T))))) + rnd32(u)))))))

Conservative bound: [-276.076835, -0.019018]

Simplified rounding: rnd32((rnd32(((-(rnd[32,ne,1.00,-24,0]((rnd32((1657/5)) + rnd32((rnd32((3/5)) * rnd32(T))))))) * rnd32(v))) / rnd32((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd32((1657/5)) + rnd32((rnd32((3/5)) * rnd32(T))))) + rnd32(u))) * rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd32((1657/5)) + rnd32((rnd32((3/5)) * rnd32(T))))) + rnd32(u)))))))
Building Taylor forms...
Simplifying Taylor forms...
success
v0 = (((-(((1657/5) + ((3/5) * T)))) * v) * (1 / ((((1657/5) + ((3/5) * T)) + u) * (((1657/5) + ((3/5) * T)) + u))))
-1 (58): exp = -24: (3696144509386589/288230376151711744)
1 (24): exp = -24: ((((((((-(((1657/5) + ((3/5) * T)))) * v) * (-((((((1657/5) + ((3/5) * T)) + u) * (512/5)) / (((((1657/5) + ((3/5) * T)) + u) * (((1657/5) + ((3/5) * T)) + u)) * ((((1657/5) + ((3/5) * T)) + u) * (((1657/5) + ((3/5) * T)) + u))))))) + (((-(((1657/5) + ((3/5) * T)))) * v) * (-((((((1657/5) + ((3/5) * T)) + u) * (T * (-2/5))) / (((((1657/5) + ((3/5) * T)) + u) * (((1657/5) + ((3/5) * T)) + u)) * ((((1657/5) + ((3/5) * T)) + u) * (((1657/5) + ((3/5) * T)) + u)))))))) + (((-(((1657/5) + ((3/5) * T)))) * v) * (-((((((1657/5) + ((3/5) * T)) + u) * (512/5)) / (((((1657/5) + ((3/5) * T)) + u) * (((1657/5) + ((3/5) * T)) + u)) * ((((1657/5) + ((3/5) * T)) + u) * (((1657/5) + ((3/5) * T)) + u)))))))) + (((-(((1657/5) + ((3/5) * T)))) * v) * (-((((((1657/5) + ((3/5) * T)) + u) * (T * (-2/5))) / (((((1657/5) + ((3/5) * T)) + u) * (((1657/5) + ((3/5) * T)) + u)) * ((((1657/5) + ((3/5) * T)) + u) * (((1657/5) + ((3/5) * T)) + u)))))))) + ((1 / ((((1657/5) + ((3/5) * T)) + u) * (((1657/5) + ((3/5) * T)) + u))) * (v * (-((512/5)))))) + ((1 / ((((1657/5) + ((3/5) * T)) + u) * (((1657/5) + ((3/5) * T)) + u))) * (v * (-((T * (-2/5)))))))
2 (26): exp = -24: (((((-(((1657/5) + ((3/5) * T)))) * v) * (-((((((1657/5) + ((3/5) * T)) + u) * ((3/5) * floor_power2(T))) / (((((1657/5) + ((3/5) * T)) + u) * (((1657/5) + ((3/5) * T)) + u)) * ((((1657/5) + ((3/5) * T)) + u) * (((1657/5) + ((3/5) * T)) + u))))))) + (((-(((1657/5) + ((3/5) * T)))) * v) * (-((((((1657/5) + ((3/5) * T)) + u) * ((3/5) * floor_power2(T))) / (((((1657/5) + ((3/5) * T)) + u) * (((1657/5) + ((3/5) * T)) + u)) * ((((1657/5) + ((3/5) * T)) + u) * (((1657/5) + ((3/5) * T)) + u)))))))) + ((1 / ((((1657/5) + ((3/5) * T)) + u) * (((1657/5) + ((3/5) * T)) + u))) * (v * (-(((3/5) * floor_power2(T)))))))
3 (28): exp = -24: (((((-(((1657/5) + ((3/5) * T)))) * v) * (-((((((1657/5) + ((3/5) * T)) + u) * floor_power2((((3/5) * T) + interval(-2.57492069977161051216e-06, 2.57492069977161051216e-06)))) / (((((1657/5) + ((3/5) * T)) + u) * (((1657/5) + ((3/5) * T)) + u)) * ((((1657/5) + ((3/5) * T)) + u) * (((1657/5) + ((3/5) * T)) + u))))))) + (((-(((1657/5) + ((3/5) * T)))) * v) * (-((((((1657/5) + ((3/5) * T)) + u) * floor_power2((((3/5) * T) + interval(-2.57492069977161051216e-06, 2.57492069977161051216e-06)))) / (((((1657/5) + ((3/5) * T)) + u) * (((1657/5) + ((3/5) * T)) + u)) * ((((1657/5) + ((3/5) * T)) + u) * (((1657/5) + ((3/5) * T)) + u)))))))) + ((1 / ((((1657/5) + ((3/5) * T)) + u) * (((1657/5) + ((3/5) * T)) + u))) * (v * (-(floor_power2((((3/5) * T) + interval(-2.57492069977161051216e-06, 2.57492069977161051216e-06))))))))
4 (30): exp = -24: (((((-(((1657/5) + ((3/5) * T)))) * v) * (-((((((1657/5) + ((3/5) * T)) + u) * floor_power2((((1657/5) + ((3/5) * T)) + interval(-1.05857849575841121215e-05, 1.05857849575841121215e-05)))) / (((((1657/5) + ((3/5) * T)) + u) * (((1657/5) + ((3/5) * T)) + u)) * ((((1657/5) + ((3/5) * T)) + u) * (((1657/5) + ((3/5) * T)) + u))))))) + (((-(((1657/5) + ((3/5) * T)))) * v) * (-((((((1657/5) + ((3/5) * T)) + u) * floor_power2((((1657/5) + ((3/5) * T)) + interval(-1.05857849575841121215e-05, 1.05857849575841121215e-05)))) / (((((1657/5) + ((3/5) * T)) + u) * (((1657/5) + ((3/5) * T)) + u)) * ((((1657/5) + ((3/5) * T)) + u) * (((1657/5) + ((3/5) * T)) + u)))))))) + ((1 / ((((1657/5) + ((3/5) * T)) + u) * (((1657/5) + ((3/5) * T)) + u))) * (v * (-(floor_power2((((1657/5) + ((3/5) * T)) + interval(-1.05857849575841121215e-05, 1.05857849575841121215e-05))))))))
5 (9): exp = -24: ((1 / ((((1657/5) + ((3/5) * T)) + u) * (((1657/5) + ((3/5) * T)) + u))) * ((-(((1657/5) + ((3/5) * T)))) * floor_power2(v)))
6 (11): exp = -24: ((1 / ((((1657/5) + ((3/5) * T)) + u) * (((1657/5) + ((3/5) * T)) + u))) * floor_power2((((-(((1657/5) + ((3/5) * T)))) * v) + interval(-1.00490343824094474634e+00, 1.00490343824094474634e+00))))
7 (32): exp = -24: ((((-(((1657/5) + ((3/5) * T)))) * v) * (-((((((1657/5) + ((3/5) * T)) + u) * floor_power2(u)) / (((((1657/5) + ((3/5) * T)) + u) * (((1657/5) + ((3/5) * T)) + u)) * ((((1657/5) + ((3/5) * T)) + u) * (((1657/5) + ((3/5) * T)) + u))))))) + (((-(((1657/5) + ((3/5) * T)))) * v) * (-((((((1657/5) + ((3/5) * T)) + u) * floor_power2(u)) / (((((1657/5) + ((3/5) * T)) + u) * (((1657/5) + ((3/5) * T)) + u)) * ((((1657/5) + ((3/5) * T)) + u) * (((1657/5) + ((3/5) * T)) + u))))))))
8 (33): exp = -24: ((((-(((1657/5) + ((3/5) * T)))) * v) * (-((((((1657/5) + ((3/5) * T)) + u) * floor_power2(((((1657/5) + ((3/5) * T)) + u) + interval(-2.96592712857091155097e-05, 2.96592712857091155097e-05)))) / (((((1657/5) + ((3/5) * T)) + u) * (((1657/5) + ((3/5) * T)) + u)) * ((((1657/5) + ((3/5) * T)) + u) * (((1657/5) + ((3/5) * T)) + u))))))) + (((-(((1657/5) + ((3/5) * T)))) * v) * (-((((((1657/5) + ((3/5) * T)) + u) * floor_power2(((((1657/5) + ((3/5) * T)) + u) + interval(-2.96592712857091155097e-05, 2.96592712857091155097e-05)))) / (((((1657/5) + ((3/5) * T)) + u) * (((1657/5) + ((3/5) * T)) + u)) * ((((1657/5) + ((3/5) * T)) + u) * (((1657/5) + ((3/5) * T)) + u))))))))
9 (36): exp = -24: (((-(((1657/5) + ((3/5) * T)))) * v) * (-((floor_power2((((((1657/5) + ((3/5) * T)) + u) * (((1657/5) + ((3/5) * T)) + u)) + interval(-4.42353078485485037841e-02, 4.42353078485485037841e-02))) / (((((1657/5) + ((3/5) * T)) + u) * (((1657/5) + ((3/5) * T)) + u)) * ((((1657/5) + ((3/5) * T)) + u) * (((1657/5) + ((3/5) * T)) + u)))))))
10 (40): exp = -24: floor_power2(((((-(((1657/5) + ((3/5) * T)))) * v) * (1 / ((((1657/5) + ((3/5) * T)) + u) * (((1657/5) + ((3/5) * T)) + u)))) + interval(-4.77133187064279675610e-04, 4.77133187064279675610e-04)))

Corresponding original subexpressions:
1: rnd32(0)
2: rnd32(T)
3: rnd32((rnd32((3/5)) * rnd32(T)))
4: rnd[32,ne,1.00,-24,0]((rnd32((1657/5)) + rnd32((rnd32((3/5)) * rnd32(T)))))
5: rnd32(v)
6: rnd32(((-(rnd[32,ne,1.00,-24,0]((rnd32((1657/5)) + rnd32((rnd32((3/5)) * rnd32(T))))))) * rnd32(v)))
7: rnd32(u)
8: rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd32((1657/5)) + rnd32((rnd32((3/5)) * rnd32(T))))) + rnd32(u)))
9: rnd32((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd32((1657/5)) + rnd32((rnd32((3/5)) * rnd32(T))))) + rnd32(u))) * rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd32((1657/5)) + rnd32((rnd32((3/5)) * rnd32(T))))) + rnd32(u)))))
10: rnd32((rnd32(((-(rnd[32,ne,1.00,-24,0]((rnd32((1657/5)) + rnd32((rnd32((3/5)) * rnd32(T))))))) * rnd32(v))) / rnd32((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd32((1657/5)) + rnd32((rnd32((3/5)) * rnd32(T))))) + rnd32(u))) * rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd32((1657/5)) + rnd32((rnd32((3/5)) * rnd32(T))))) + rnd32(u)))))))

bounds: [-2.323995e+02, -2.087374e-02]

Computing absolute errors
-1: exp = -24: 1.282358e-02 (low = 1.282358e-02, subopt = 0.0%)

Solving the exact optimization problem
exact bound (exp = -24): 1.863253e+03 (low = 1.848854e+03, subopt = 0.8%)
total2: 7.643448e-10 (low = 7.643448e-10, subopt = 0.0%)
exact total: 1.110593e-04 (low = 1.102011e-04, subopt = 0.8%)

Computing relative errors
-1: exp = -24: 1.282358e-02 (low = 1.282358e-02, subopt = 0.0%)

Solving the exact optimization problem
exact bound-rel (exp = -24): 9.268495e+00 (low = 8.927223e+00, subopt = 3.7%)
total2: 3.661753e-08 (low = 3.288926e-12, subopt = 100.0%)
exact total-rel: 5.890629e-07 (low = 5.321072e-07, subopt = 9.7%)
**WARNING**: Large second-order error: 3.661753e-08 (first-order = 5.524454e-07)
**WARNING**: Try intermediate-opt = true or manually split intervals of input variables.

Elapsed time: 77.56993
*************************************

-------------------------------------------------------------------------------
Problem: doppler2

Optimization lower bounds for error models:
The absolute error model (exact): 1.102010e-4 (0x1.ce37813d88ca2p-14) (suboptimality = 0.8%)
The relative error model (exact): 5.321072e-7 (0x1.1dac43358bb5p-21) (suboptimality = 9.7%)

Bounds (without rounding): [-2.323995e+2, -2.087373e-2]
Bounds (floating-point): [-2.323996e+2, -2.076267e-2]

Absolute error (exact): 1.110593e-4 (0x1.d1d10355a1f8bp-14)
Relative error (exact): 5.890629e-7 (0x1.3c40302522fp-21)

Elapsed time: 77.57


