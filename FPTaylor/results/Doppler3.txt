***** The environment variable FPTAYLOR_BASE is defined = '/home/roki/GIT/FPTaylor'
Loading configuration file: /home/roki/GIT/FPTaylor/default.cfg
FPTaylor, version 0.9.3+dev

Loading: /home/roki/GIT/paf/FPTaylor/Doppler3.txt
Processing: doppler3

*************************************
Taylor form for: rnd32((rnd32((rnd32((-(rnd32((rnd32((1657/5)) + rnd32((rnd32((3/5)) * rnd32(T)))))))) * rnd32(v))) / rnd32((rnd32((rnd32((rnd32((1657/5)) + rnd32((rnd32((3/5)) * rnd32(T))))) + rnd32(u))) * rnd32((rnd32((rnd32((1657/5)) + rnd32((rnd32((3/5)) * rnd32(T))))) + rnd32(u)))))))

Conservative bound: [-96.294090, -0.437730]

Simplified rounding: rnd32((rnd32(((-(rnd[32,ne,1.00,-24,0]((rnd32((1657/5)) + rnd32((rnd32((3/5)) * rnd32(T))))))) * rnd32(v))) / rnd32((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd32((1657/5)) + rnd32((rnd32((3/5)) * rnd32(T))))) + rnd32(u))) * rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd32((1657/5)) + rnd32((rnd32((3/5)) * rnd32(T))))) + rnd32(u)))))))
Building Taylor forms...
Simplifying Taylor forms...
success
v0 = (((-(((1657/5) + ((3/5) * T)))) * v) * (1 / ((((1657/5) + ((3/5) * T)) + u) * (((1657/5) + ((3/5) * T)) + u))))
-1 (58): exp = -24: (4263264280838545/4611686018427387904)
1 (24): exp = -24: ((((((((-(((1657/5) + ((3/5) * T)))) * v) * (-((((((1657/5) + ((3/5) * T)) + u) * (512/5)) / (((((1657/5) + ((3/5) * T)) + u) * (((1657/5) + ((3/5) * T)) + u)) * ((((1657/5) + ((3/5) * T)) + u) * (((1657/5) + ((3/5) * T)) + u))))))) + (((-(((1657/5) + ((3/5) * T)))) * v) * (-((((((1657/5) + ((3/5) * T)) + u) * (T * (-2/5))) / (((((1657/5) + ((3/5) * T)) + u) * (((1657/5) + ((3/5) * T)) + u)) * ((((1657/5) + ((3/5) * T)) + u) * (((1657/5) + ((3/5) * T)) + u)))))))) + (((-(((1657/5) + ((3/5) * T)))) * v) * (-((((((1657/5) + ((3/5) * T)) + u) * (512/5)) / (((((1657/5) + ((3/5) * T)) + u) * (((1657/5) + ((3/5) * T)) + u)) * ((((1657/5) + ((3/5) * T)) + u) * (((1657/5) + ((3/5) * T)) + u)))))))) + (((-(((1657/5) + ((3/5) * T)))) * v) * (-((((((1657/5) + ((3/5) * T)) + u) * (T * (-2/5))) / (((((1657/5) + ((3/5) * T)) + u) * (((1657/5) + ((3/5) * T)) + u)) * ((((1657/5) + ((3/5) * T)) + u) * (((1657/5) + ((3/5) * T)) + u)))))))) + ((1 / ((((1657/5) + ((3/5) * T)) + u) * (((1657/5) + ((3/5) * T)) + u))) * (v * (-((512/5)))))) + ((1 / ((((1657/5) + ((3/5) * T)) + u) * (((1657/5) + ((3/5) * T)) + u))) * (v * (-((T * (-2/5)))))))
2 (26): exp = -24: (((((-(((1657/5) + ((3/5) * T)))) * v) * (-((((((1657/5) + ((3/5) * T)) + u) * ((3/5) * floor_power2(T))) / (((((1657/5) + ((3/5) * T)) + u) * (((1657/5) + ((3/5) * T)) + u)) * ((((1657/5) + ((3/5) * T)) + u) * (((1657/5) + ((3/5) * T)) + u))))))) + (((-(((1657/5) + ((3/5) * T)))) * v) * (-((((((1657/5) + ((3/5) * T)) + u) * ((3/5) * floor_power2(T))) / (((((1657/5) + ((3/5) * T)) + u) * (((1657/5) + ((3/5) * T)) + u)) * ((((1657/5) + ((3/5) * T)) + u) * (((1657/5) + ((3/5) * T)) + u)))))))) + ((1 / ((((1657/5) + ((3/5) * T)) + u) * (((1657/5) + ((3/5) * T)) + u))) * (v * (-(((3/5) * floor_power2(T)))))))
3 (28): exp = -24: (((((-(((1657/5) + ((3/5) * T)))) * v) * (-((((((1657/5) + ((3/5) * T)) + u) * floor_power2((((3/5) * T) + interval(-2.33650212067004801216e-06, 2.33650212067004801216e-06)))) / (((((1657/5) + ((3/5) * T)) + u) * (((1657/5) + ((3/5) * T)) + u)) * ((((1657/5) + ((3/5) * T)) + u) * (((1657/5) + ((3/5) * T)) + u))))))) + (((-(((1657/5) + ((3/5) * T)))) * v) * (-((((((1657/5) + ((3/5) * T)) + u) * floor_power2((((3/5) * T) + interval(-2.33650212067004801216e-06, 2.33650212067004801216e-06)))) / (((((1657/5) + ((3/5) * T)) + u) * (((1657/5) + ((3/5) * T)) + u)) * ((((1657/5) + ((3/5) * T)) + u) * (((1657/5) + ((3/5) * T)) + u)))))))) + ((1 / ((((1657/5) + ((3/5) * T)) + u) * (((1657/5) + ((3/5) * T)) + u))) * (v * (-(floor_power2((((3/5) * T) + interval(-2.33650212067004801216e-06, 2.33650212067004801216e-06))))))))
4 (30): exp = -24: (((((-(((1657/5) + ((3/5) * T)))) * v) * (-((((((1657/5) + ((3/5) * T)) + u) * floor_power2((((1657/5) + ((3/5) * T)) + interval(-9.39369206207629962153e-06, 9.39369206207629962153e-06)))) / (((((1657/5) + ((3/5) * T)) + u) * (((1657/5) + ((3/5) * T)) + u)) * ((((1657/5) + ((3/5) * T)) + u) * (((1657/5) + ((3/5) * T)) + u))))))) + (((-(((1657/5) + ((3/5) * T)))) * v) * (-((((((1657/5) + ((3/5) * T)) + u) * floor_power2((((1657/5) + ((3/5) * T)) + interval(-9.39369206207629962153e-06, 9.39369206207629962153e-06)))) / (((((1657/5) + ((3/5) * T)) + u) * (((1657/5) + ((3/5) * T)) + u)) * ((((1657/5) + ((3/5) * T)) + u) * (((1657/5) + ((3/5) * T)) + u)))))))) + ((1 / ((((1657/5) + ((3/5) * T)) + u) * (((1657/5) + ((3/5) * T)) + u))) * (v * (-(floor_power2((((1657/5) + ((3/5) * T)) + interval(-9.39369206207629962153e-06, 9.39369206207629962153e-06))))))))
5 (9): exp = -24: ((1 / ((((1657/5) + ((3/5) * T)) + u) * (((1657/5) + ((3/5) * T)) + u))) * ((-(((1657/5) + ((3/5) * T)))) * floor_power2(v)))
6 (11): exp = -24: ((1 / ((((1657/5) + ((3/5) * T)) + u) * (((1657/5) + ((3/5) * T)) + u))) * floor_power2((((-(((1657/5) + ((3/5) * T)))) * v) + interval(-8.41656328403587616904e-01, 8.41656328403587616904e-01))))
7 (32): exp = -24: ((((-(((1657/5) + ((3/5) * T)))) * v) * (-((((((1657/5) + ((3/5) * T)) + u) * floor_power2(u)) / (((((1657/5) + ((3/5) * T)) + u) * (((1657/5) + ((3/5) * T)) + u)) * ((((1657/5) + ((3/5) * T)) + u) * (((1657/5) + ((3/5) * T)) + u))))))) + (((-(((1657/5) + ((3/5) * T)))) * v) * (-((((((1657/5) + ((3/5) * T)) + u) * floor_power2(u)) / (((((1657/5) + ((3/5) * T)) + u) * (((1657/5) + ((3/5) * T)) + u)) * ((((1657/5) + ((3/5) * T)) + u) * (((1657/5) + ((3/5) * T)) + u))))))))
8 (33): exp = -24: ((((-(((1657/5) + ((3/5) * T)))) * v) * (-((((((1657/5) + ((3/5) * T)) + u) * floor_power2(((((1657/5) + ((3/5) * T)) + u) + interval(-2.84671783902013030097e-05, 2.84671783902013030097e-05)))) / (((((1657/5) + ((3/5) * T)) + u) * (((1657/5) + ((3/5) * T)) + u)) * ((((1657/5) + ((3/5) * T)) + u) * (((1657/5) + ((3/5) * T)) + u))))))) + (((-(((1657/5) + ((3/5) * T)))) * v) * (-((((((1657/5) + ((3/5) * T)) + u) * floor_power2(((((1657/5) + ((3/5) * T)) + u) + interval(-2.84671783902013030097e-05, 2.84671783902013030097e-05)))) / (((((1657/5) + ((3/5) * T)) + u) * (((1657/5) + ((3/5) * T)) + u)) * ((((1657/5) + ((3/5) * T)) + u) * (((1657/5) + ((3/5) * T)) + u))))))))
9 (36): exp = -24: (((-(((1657/5) + ((3/5) * T)))) * v) * (-((floor_power2((((((1657/5) + ((3/5) * T)) + u) * (((1657/5) + ((3/5) * T)) + u)) + interval(-4.10499401565562332950e-02, 4.10499401565562332950e-02))) / (((((1657/5) + ((3/5) * T)) + u) * (((1657/5) + ((3/5) * T)) + u)) * ((((1657/5) + ((3/5) * T)) + u) * (((1657/5) + ((3/5) * T)) + u)))))))
10 (40): exp = -24: floor_power2(((((-(((1657/5) + ((3/5) * T)))) * v) * (1 / ((((1657/5) + ((3/5) * T)) + u) * (((1657/5) + ((3/5) * T)) + u)))) + interval(-7.86991691253081048461e-05, 7.86991691253081048461e-05)))

Corresponding original subexpressions:
1: rnd32(0)
2: rnd32(T)
3: rnd32((rnd32((3/5)) * rnd32(T)))
4: rnd[32,ne,1.00,-24,0]((rnd32((1657/5)) + rnd32((rnd32((3/5)) * rnd32(T)))))
5: rnd32(v)
6: rnd32(((-(rnd[32,ne,1.00,-24,0]((rnd32((1657/5)) + rnd32((rnd32((3/5)) * rnd32(T))))))) * rnd32(v)))
7: rnd32(u)
8: rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd32((1657/5)) + rnd32((rnd32((3/5)) * rnd32(T))))) + rnd32(u)))
9: rnd32((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd32((1657/5)) + rnd32((rnd32((3/5)) * rnd32(T))))) + rnd32(u))) * rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd32((1657/5)) + rnd32((rnd32((3/5)) * rnd32(T))))) + rnd32(u)))))
10: rnd32((rnd32(((-(rnd[32,ne,1.00,-24,0]((rnd32((1657/5)) + rnd32((rnd32((3/5)) * rnd32(T))))))) * rnd32(v))) / rnd32((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd32((1657/5)) + rnd32((rnd32((3/5)) * rnd32(T))))) + rnd32(u))) * rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd32((1657/5)) + rnd32((rnd32((3/5)) * rnd32(T))))) + rnd32(u)))))))

bounds: [-8.347869e+01, -5.030854e-01]

Computing absolute errors
-1: exp = -24: 9.244481e-04 (low = 9.244481e-04, subopt = 0.0%)

Solving the exact optimization problem
exact bound (exp = -24): 5.720313e+02 (low = 5.675528e+02, subopt = 0.8%)
total2: 5.510140e-11 (low = 5.510140e-11, subopt = 0.0%)
exact total: 3.409578e-05 (low = 3.382884e-05, subopt = 0.8%)

Computing relative errors
-1: exp = -24: 9.244481e-04 (low = 9.244481e-04, subopt = 0.0%)

Solving the exact optimization problem
exact bound-rel (exp = -24): 7.449723e+00 (low = 7.373786e+00, subopt = 1.0%)
total2: 1.095269e-10 (low = 6.600655e-13, subopt = 99.4%)
exact total-rel: 4.441476e-07 (low = 4.395126e-07, subopt = 1.0%)

Elapsed time: 44.54323
*************************************

-------------------------------------------------------------------------------
Problem: doppler3

Optimization lower bounds for error models:
The absolute error model (exact): 3.382883e-5 (0x1.1bc6e0bb45b06p-15) (suboptimality = 0.8%)
The relative error model (exact): 4.395125e-7 (0x1.d7ec4bc7b1c6ep-22) (suboptimality = 1.0%)

Bounds (without rounding): [-8.347869e+1, -5.030853e-1]
Bounds (floating-point): [-8.347873e+1, -5.030512e-1]

Absolute error (exact): 3.409578e-5 (0x1.1e04203c6aa67p-15)
Relative error (exact): 4.441477e-7 (0x1.dce65ecd92592p-22)

Elapsed time: 44.54


