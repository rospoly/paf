Loading configuration file: /home/roki/GIT/FPTaylor/./default.cfg
FPTaylor, version 0.9.3+dev

Loading: /home/roki/GIT/FPTaylor/benchmarks/probability/Filters3.txt
Processing: filter3

*************************************
Taylor form for: rnd32((rnd32((rnd32((rnd32((rnd32((rnd32((7/10)) * rnd32(x2))) - rnd32((rnd32((13/10)) * rnd32(x1))))) + rnd32((rnd32((11/10)) * rnd32(x0))))) + rnd32((rnd32((7/5)) * rnd32((rnd32((rnd32((rnd32((7/10)) * rnd32(x1))) - rnd32((rnd32((13/10)) * rnd32(x0))))) + rnd32((rnd32((7/5)) * rnd32((rnd32((7/10)) * rnd32(x0))))))))))) - rnd32((rnd32((7/10)) * rnd32((rnd32((7/10)) * rnd32(x0)))))))

Conservative bound: [-15.524007, 15.524007]

Simplified rounding: rnd[float32,ne,1.00,-24,0]((rnd[float32,ne,1.00,-24,0]((rnd[float32,ne,1.00,-24,0]((rnd[float32,ne,1.00,-24,0]((rnd32((rnd32((7/10)) * rnd32(x2))) - rnd32((rnd32((13/10)) * rnd32(x1))))) + rnd32((rnd32((11/10)) * rnd32(x0))))) + rnd32((rnd32((7/5)) * rnd[float32,ne,1.00,-24,0]((rnd[float32,ne,1.00,-24,0]((rnd32((rnd32((7/10)) * rnd32(x1))) - rnd32((rnd32((13/10)) * rnd32(x0))))) + rnd32((rnd32((7/5)) * rnd32((rnd32((7/10)) * rnd32(x0))))))))))) - rnd32((rnd32((7/10)) * rnd32((rnd32((7/10)) * rnd32(x0)))))))
Building Taylor forms...
Simplifying Taylor forms...
success
v0 = ((((((7/10) * x2) - ((13/10) * x1)) + ((11/10) * x0)) + ((7/5) * ((((7/10) * x1) - ((13/10) * x0)) + ((7/5) * ((7/10) * x0))))) - ((7/10) * ((7/10) * x0)))
-1 (84): exp = -24: (7165227040700901/9444732965739290427392)
1 (1): exp = -24: ((((((((((x2 * (1/5)) + (-((x1 * (4/5))))) + (x0 * (-2/5))) + ((7/5) * (x1 * (1/5)))) + ((7/5) * (-((x0 * (4/5)))))) + ((7/5) * ((7/5) * (x0 * (1/5))))) + ((7/5) * (((7/10) * x0) * (2/5)))) + (((((7/10) * x1) - ((13/10) * x0)) + ((7/5) * ((7/10) * x0))) * (2/5))) + (-(((7/10) * (x0 * (1/5)))))) + (-((((7/10) * x0) * (1/5)))))
2 (2): exp = -24: ((7/10) * floor_power2(x2))
3 (4): exp = -24: floor_power2((((7/10) * x2) + interval(-6.55651099634724391420e-08, 6.55651099634724391420e-08)))
4 (7): exp = -24: ((-(((13/10) * floor_power2(x1)))) + ((7/5) * ((7/10) * floor_power2(x1))))
5 (9): exp = -24: (-(floor_power2((((13/10) * x1) + interval(-1.72853472690803766128e-07, 1.72853472690803766128e-07)))))
6 (11): exp = -24: floor_power2(((((7/10) * x2) - ((13/10) * x1)) + interval(-4.17232516980448159680e-07, 4.17232516980448159680e-07)))
7 (14): exp = -24: (((((11/10) * floor_power2(x0)) + ((7/5) * (-(((13/10) * floor_power2(x0)))))) + ((7/5) * ((7/5) * ((7/10) * floor_power2(x0))))) + (-(((7/10) * ((7/10) * floor_power2(x0))))))
8 (16): exp = -24: floor_power2((((11/10) * x0) + interval(-1.13248826494327674902e-07, 1.13248826494327674902e-07)))
9 (18): exp = -24: floor_power2((((((7/10) * x2) - ((13/10) * x1)) + ((11/10) * x0)) + interval(-8.88109212127119822810e-07, 8.88109212127119822810e-07)))
10 (24): exp = -24: ((7/5) * floor_power2((((7/10) * x1) + interval(-6.55651099634724391420e-08, 6.55651099634724391420e-08))))
11 (29): exp = -24: ((7/5) * (-(floor_power2((((13/10) * x0) + interval(-1.72853472690803766128e-07, 1.72853472690803766128e-07))))))
12 (31): exp = -24: ((7/5) * floor_power2(((((7/10) * x1) - ((13/10) * x0)) + interval(-4.17232516980448159680e-07, 4.17232516980448159680e-07))))
13 (37): exp = -24: (((7/5) * ((7/5) * floor_power2((((7/10) * x0) + interval(-6.55651099634724391420e-08, 6.55651099634724391420e-08))))) + (-(((7/10) * floor_power2((((7/10) * x0) + interval(-6.55651099634724391420e-08, 6.55651099634724391420e-08)))))))
14 (40): exp = -24: ((7/5) * floor_power2((((7/5) * ((7/10) * x0)) + interval(-2.08616260692906604107e-07, 2.08616260692906604107e-07))))
15 (42): exp = -24: ((7/5) * floor_power2((((((7/10) * x1) - ((13/10) * x0)) + ((7/5) * ((7/10) * x0))) + interval(-9.23872001550308232893e-07, 9.23872001550308232893e-07))))
16 (45): exp = -24: floor_power2((((7/5) * ((((7/10) * x1) - ((13/10) * x0)) + ((7/5) * ((7/10) * x0)))) + interval(-1.76930431376831756277e-06, 1.76930431376831756277e-06)))
17 (47): exp = -24: floor_power2(((((((7/10) * x2) - ((13/10) * x1)) + ((11/10) * x0)) + ((7/5) * ((((7/10) * x1) - ((13/10) * x0)) + ((7/5) * ((7/10) * x0))))) + interval(-3.37266926320012795607e-06, 3.37266926320012795607e-06)))
18 (56): exp = -24: (-(floor_power2((((7/10) * ((7/10) * x0)) + interval(-1.04308130346453302053e-07, 1.04308130346453302053e-07)))))
19 (58): exp = -24: floor_power2((((((((7/10) * x2) - ((13/10) * x1)) + ((11/10) * x0)) + ((7/5) * ((((7/10) * x1) - ((13/10) * x0)) + ((7/5) * ((7/10) * x0))))) - ((7/10) * ((7/10) * x0))) + interval(-3.98361687413740258971e-06, 3.98361687413740258971e-06)))

Corresponding original subexpressions:
1: rnd32(0)
2: rnd32(x2)
3: rnd32((rnd32((7/10)) * rnd32(x2)))
4: rnd32(x1)
5: rnd32((rnd32((13/10)) * rnd32(x1)))
6: rnd[float32,ne,1.00,-24,0]((rnd32((rnd32((7/10)) * rnd32(x2))) - rnd32((rnd32((13/10)) * rnd32(x1)))))
7: rnd32(x0)
8: rnd32((rnd32((11/10)) * rnd32(x0)))
9: rnd[float32,ne,1.00,-24,0]((rnd[float32,ne,1.00,-24,0]((rnd32((rnd32((7/10)) * rnd32(x2))) - rnd32((rnd32((13/10)) * rnd32(x1))))) + rnd32((rnd32((11/10)) * rnd32(x0)))))
10: rnd32((rnd32((7/10)) * rnd32(x1)))
11: rnd32((rnd32((13/10)) * rnd32(x0)))
12: rnd[float32,ne,1.00,-24,0]((rnd32((rnd32((7/10)) * rnd32(x1))) - rnd32((rnd32((13/10)) * rnd32(x0)))))
13: rnd32((rnd32((7/10)) * rnd32(x0)))
14: rnd32((rnd32((7/5)) * rnd32((rnd32((7/10)) * rnd32(x0)))))
15: rnd[float32,ne,1.00,-24,0]((rnd[float32,ne,1.00,-24,0]((rnd32((rnd32((7/10)) * rnd32(x1))) - rnd32((rnd32((13/10)) * rnd32(x0))))) + rnd32((rnd32((7/5)) * rnd32((rnd32((7/10)) * rnd32(x0)))))))
16: rnd32((rnd32((7/5)) * rnd[float32,ne,1.00,-24,0]((rnd[float32,ne,1.00,-24,0]((rnd32((rnd32((7/10)) * rnd32(x1))) - rnd32((rnd32((13/10)) * rnd32(x0))))) + rnd32((rnd32((7/5)) * rnd32((rnd32((7/10)) * rnd32(x0)))))))))
17: rnd[float32,ne,1.00,-24,0]((rnd[float32,ne,1.00,-24,0]((rnd[float32,ne,1.00,-24,0]((rnd32((rnd32((7/10)) * rnd32(x2))) - rnd32((rnd32((13/10)) * rnd32(x1))))) + rnd32((rnd32((11/10)) * rnd32(x0))))) + rnd32((rnd32((7/5)) * rnd[float32,ne,1.00,-24,0]((rnd[float32,ne,1.00,-24,0]((rnd32((rnd32((7/10)) * rnd32(x1))) - rnd32((rnd32((13/10)) * rnd32(x0))))) + rnd32((rnd32((7/5)) * rnd32((rnd32((7/10)) * rnd32(x0)))))))))))
18: rnd32((rnd32((7/10)) * rnd32((rnd32((7/10)) * rnd32(x0)))))
19: rnd[float32,ne,1.00,-24,0]((rnd[float32,ne,1.00,-24,0]((rnd[float32,ne,1.00,-24,0]((rnd[float32,ne,1.00,-24,0]((rnd32((rnd32((7/10)) * rnd32(x2))) - rnd32((rnd32((13/10)) * rnd32(x1))))) + rnd32((rnd32((11/10)) * rnd32(x0))))) + rnd32((rnd32((7/5)) * rnd[float32,ne,1.00,-24,0]((rnd[float32,ne,1.00,-24,0]((rnd32((rnd32((7/10)) * rnd32(x1))) - rnd32((rnd32((13/10)) * rnd32(x0))))) + rnd32((rnd32((7/5)) * rnd32((rnd32((7/10)) * rnd32(x0))))))))))) - rnd32((rnd32((7/10)) * rnd32((rnd32((7/10)) * rnd32(x0)))))))

bounds: [-2.389703e+00, 2.389703e+00]

Computing absolute errors
-1: exp = -24: 7.586479e-07 (low = 7.586479e-07, subopt = 0.0%)

Solving the exact optimization problem
exact bound (exp = -24): 3.736700e+01 (low = 3.265937e+01, subopt = 12.6%)
total2: 4.521894e-14 (low = 4.521894e-14, subopt = 0.0%)
exact total: 2.227247e-06 (low = 1.946650e-06, subopt = 12.6%)

Computing relative errors
**WARNING**: 
Cannot compute the relative error: values of the function are close to zero

**WARNING**: 0.00000000000000000000000000000000000000000000000000100000000000000000761622370578234285759930916419271389895138472837095389481447900651438935953211746691245522253373491061798089161657965284746296674711629748344421386718750000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000

Elapsed time: 0.54007
*************************************

-------------------------------------------------------------------------------
Problem: filter3

Optimization lower bounds for error models:
The absolute error model (exact): 1.946650e-06 (suboptimality = 12.6%)

Bounds (without rounding): [-2.389703e+00, 2.389703e+00]
Bounds (floating-point): [-2.38970535224681102093e+00, 2.38970535224681102093e+00]

Absolute error (exact): 2.227247e-06

Elapsed time: 0.54


