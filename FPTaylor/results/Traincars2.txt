Loading configuration file: /home/roki/GIT/FPTaylor/./default.cfg
FPTaylor, version 0.9.3+dev

Loading: /home/roki/GIT/FPTaylor/benchmarks/probability/Traincars2.txt
Processing: traincars2

*************************************
Taylor form for: rnd32((rnd32((rnd32((rnd32((rnd32((rnd32((rnd32((-(rnd32((14914650038672501/5000000000000000))))) * rnd32(s0))) + rnd32((rnd32((28399180104656203/1000000000000000)) * rnd32(s1))))) + rnd32((rnd32((-(rnd32((7600662603104999/50000000000000))))) * rnd32(s2))))) + rnd32((rnd32((35623840930436779/100000000000000)) * rnd32(s3))))) + rnd32((rnd32((-(rnd32((20636383424191501/100000000000000))))) * rnd32(s4))))) + rnd32((10830197078772951/500000000000000))))

Conservative bound: [-3645.756704, 3845.604370]

Simplified rounding: rnd[float32,ne,1.00,-24,0]((rnd[float32,ne,1.00,-24,0]((rnd[float32,ne,1.00,-24,0]((rnd[float32,ne,1.00,-24,0]((rnd[float32,ne,1.00,-24,0]((rnd32(((-(rnd32((14914650038672501/5000000000000000)))) * rnd32(s0))) + rnd32((rnd32((28399180104656203/1000000000000000)) * rnd32(s1))))) + rnd32(((-(rnd32((7600662603104999/50000000000000)))) * rnd32(s2))))) + rnd32((rnd32((35623840930436779/100000000000000)) * rnd32(s3))))) + rnd32(((-(rnd32((20636383424191501/100000000000000)))) * rnd32(s4))))) + rnd32((10830197078772951/500000000000000))))
Building Taylor forms...
Simplifying Taylor forms...
success
v0 = (((((((-((14914650038672501/5000000000000000))) * s0) + ((28399180104656203/1000000000000000) * s1)) + ((-((7600662603104999/50000000000000))) * s2)) + ((35623840930436779/100000000000000) * s3)) + ((-((20636383424191501/100000000000000))) * s4)) + (10830197078772951/500000000000000))
-1 (50): exp = -24: (5254086724551979/36893488147419103232)
1 (1): exp = -24: ((((((s0 * (-((160620633012/152587890625)))) + (s1 * (330771475936/30517578125))) + (s2 * (-((761159037952/6103515625))))) + (s3 * (612767261696/6103515625))) + (s4 * (-((376372097024/6103515625))))) + (-261648998176/30517578125))
2 (2): exp = -24: ((-((14914650038672501/5000000000000000))) * floor_power2(s0))
3 (4): exp = -24: floor_power2((((-((14914650038672501/5000000000000000))) * s0) + interval(-1.98705381085768179142e-06, 1.98705381085768179142e-06)))
4 (7): exp = -24: ((28399180104656203/1000000000000000) * floor_power2(s1))
5 (9): exp = -24: floor_power2((((28399180104656203/1000000000000000) * s1) + interval(-1.93561269948954336160e-05, 1.93561269948954336160e-05)))
6 (11): exp = -24: floor_power2(((((-((14914650038672501/5000000000000000))) * s0) + ((28399180104656203/1000000000000000) * s1)) + interval(-2.99262496534093730307e-05, 2.99262496534093730307e-05)))
7 (14): exp = -24: ((-((7600662603104999/50000000000000))) * floor_power2(s2))
8 (16): exp = -24: floor_power2((((-((7600662603104999/50000000000000))) * s2) + interval(-1.46817507966930089038e-04, 1.46817507966930089038e-04)))
9 (18): exp = -24: floor_power2((((((-((14914650038672501/5000000000000000))) * s0) + ((28399180104656203/1000000000000000) * s1)) + ((-((7600662603104999/50000000000000))) * s2)) + interval(-2.53037702932839604370e-04, 2.53037702932839604370e-04)))
10 (21): exp = -24: ((35623840930436779/100000000000000) * floor_power2(s3))
11 (23): exp = -24: floor_power2((((35623840930436779/100000000000000) * s3) + interval(-2.29708266488916346137e-04, 2.29708266488916346137e-04)))
12 (25): exp = -24: floor_power2(((((((-((14914650038672501/5000000000000000))) * s0) + ((28399180104656203/1000000000000000) * s1)) + ((-((7600662603104999/50000000000000))) * s2)) + ((35623840930436779/100000000000000) * s3)) + interval(-6.65851438171756546819e-04, 6.65851438171756546819e-04)))
13 (28): exp = -24: ((-((20636383424191501/100000000000000))) * floor_power2(s4))
14 (30): exp = -24: floor_power2((((-((20636383424191501/100000000000000))) * s4) + interval(-1.35157033628434652397e-04, 1.35157033628434652397e-04)))
15 (32): exp = -24: floor_power2((((((((-((14914650038672501/5000000000000000))) * s0) + ((28399180104656203/1000000000000000) * s1)) + ((-((7600662603104999/50000000000000))) * s2)) + ((35623840930436779/100000000000000) * s3)) + ((-((20636383424191501/100000000000000))) * s4)) + interval(-1.04514909680019155158e-03, 1.04514909680019155158e-03)))
16 (35): exp = -24: floor_power2(((((((((-((14914650038672501/5000000000000000))) * s0) + ((28399180104656203/1000000000000000) * s1)) + ((-((7600662603104999/50000000000000))) * s2)) + ((35623840930436779/100000000000000) * s3)) + ((-((20636383424191501/100000000000000))) * s4)) + (10830197078772951/500000000000000)) + interval(-1.16773044249975392270e-03, 1.16773044249975392270e-03)))

Corresponding original subexpressions:
1: rnd32(0)
2: rnd32(s0)
3: rnd32(((-(rnd32((14914650038672501/5000000000000000)))) * rnd32(s0)))
4: rnd32(s1)
5: rnd32((rnd32((28399180104656203/1000000000000000)) * rnd32(s1)))
6: rnd[float32,ne,1.00,-24,0]((rnd32(((-(rnd32((14914650038672501/5000000000000000)))) * rnd32(s0))) + rnd32((rnd32((28399180104656203/1000000000000000)) * rnd32(s1)))))
7: rnd32(s2)
8: rnd32(((-(rnd32((7600662603104999/50000000000000)))) * rnd32(s2)))
9: rnd[float32,ne,1.00,-24,0]((rnd[float32,ne,1.00,-24,0]((rnd32(((-(rnd32((14914650038672501/5000000000000000)))) * rnd32(s0))) + rnd32((rnd32((28399180104656203/1000000000000000)) * rnd32(s1))))) + rnd32(((-(rnd32((7600662603104999/50000000000000)))) * rnd32(s2)))))
10: rnd32(s3)
11: rnd32((rnd32((35623840930436779/100000000000000)) * rnd32(s3)))
12: rnd[float32,ne,1.00,-24,0]((rnd[float32,ne,1.00,-24,0]((rnd[float32,ne,1.00,-24,0]((rnd32(((-(rnd32((14914650038672501/5000000000000000)))) * rnd32(s0))) + rnd32((rnd32((28399180104656203/1000000000000000)) * rnd32(s1))))) + rnd32(((-(rnd32((7600662603104999/50000000000000)))) * rnd32(s2))))) + rnd32((rnd32((35623840930436779/100000000000000)) * rnd32(s3)))))
13: rnd32(s4)
14: rnd32(((-(rnd32((20636383424191501/100000000000000)))) * rnd32(s4)))
15: rnd[float32,ne,1.00,-24,0]((rnd[float32,ne,1.00,-24,0]((rnd[float32,ne,1.00,-24,0]((rnd[float32,ne,1.00,-24,0]((rnd32(((-(rnd32((14914650038672501/5000000000000000)))) * rnd32(s0))) + rnd32((rnd32((28399180104656203/1000000000000000)) * rnd32(s1))))) + rnd32(((-(rnd32((7600662603104999/50000000000000)))) * rnd32(s2))))) + rnd32((rnd32((35623840930436779/100000000000000)) * rnd32(s3))))) + rnd32(((-(rnd32((20636383424191501/100000000000000)))) * rnd32(s4)))))
16: rnd[float32,ne,1.00,-24,0]((rnd[float32,ne,1.00,-24,0]((rnd[float32,ne,1.00,-24,0]((rnd[float32,ne,1.00,-24,0]((rnd[float32,ne,1.00,-24,0]((rnd32(((-(rnd32((14914650038672501/5000000000000000)))) * rnd32(s0))) + rnd32((rnd32((28399180104656203/1000000000000000)) * rnd32(s1))))) + rnd32(((-(rnd32((7600662603104999/50000000000000)))) * rnd32(s2))))) + rnd32((rnd32((35623840930436779/100000000000000)) * rnd32(s3))))) + rnd32(((-(rnd32((20636383424191501/100000000000000)))) * rnd32(s4))))) + rnd32((10830197078772951/500000000000000))))

bounds: [-3.645755e+03, 3.845603e+03]

Computing absolute errors
-1: exp = -24: 1.424123e-04 (low = 1.424123e-04, subopt = 0.0%)

Solving the exact optimization problem
exact bound (exp = -24): 1.586961e+04 (low = 1.576918e+04, subopt = 0.6%)
total2: 8.488435e-12 (low = 8.488435e-12, subopt = 0.0%)
exact total: 9.459025e-04 (low = 9.399166e-04, subopt = 0.6%)

Computing relative errors
**WARNING**: 
Cannot compute the relative error: values of the function are close to zero

**WARNING**: 0.00000000000000000000000000000000000000000000000000100000000000000000761622370578234285759930916419271389895138472837095389481447900651438935953211746691245522253373491061798089161657965284746296674711629748344421386718750000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000

Elapsed time: 1.68938
*************************************

-------------------------------------------------------------------------------
Problem: traincars2

Optimization lower bounds for error models:
The absolute error model (exact): 9.399166e-04 (suboptimality = 0.6%)

Bounds (without rounding): [-3.645755e+03, 3.845603e+03]
Bounds (floating-point): [-3.64575614506405099746e+03, 3.84560391406112285040e+03]

Absolute error (exact): 9.459025e-04

Elapsed time: 1.69


