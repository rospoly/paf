Loading configuration file: /home/roki/GIT/FPTaylor/./default.cfg
FPTaylor, version 0.9.3+dev

Loading: /home/roki/GIT/FPTaylor/benchmarks/probability/Traincars3.txt
Processing: traincars3

*************************************
Taylor form for: rnd32((rnd32((rnd32((rnd32((rnd32((rnd32((rnd32((rnd32((rnd32((-(rnd32((37377847506227999/100000000000000))))) * rnd32(s0))) + rnd32((rnd32((35431102610464501/50000000000000)) * rnd32(s1))))) + rnd32((rnd32((-(rnd32((37886044910192999/100000000000000))))) * rnd32(s2))))) + rnd32((rnd32((-(rnd32((45413076942315001/100000000000000))))) * rnd32(s3))))) + rnd32((rnd32((rnd32((-(rnd32((21846744026375501/25000000000000))))) * rnd32(1))) * rnd32(s4))))) + rnd32((rnd32((rnd32((35911290954487999/10000000000000)) * rnd32(1))) * rnd32(s5))))) + rnd32((rnd32((rnd32((-(rnd32((22921226288533999/10000000000000))))) * rnd32(1))) * rnd32(s6))))) + rnd32((29021426298877441/100000000000000))))

Conservative bound: [-66967.010168, 67314.433843]

Simplified rounding: rnd[float32,ne,1.00,-24,0]((rnd[float32,ne,1.00,-24,0]((rnd[float32,ne,1.00,-24,0]((rnd[float32,ne,1.00,-24,0]((rnd[float32,ne,1.00,-24,0]((rnd[float32,ne,1.00,-24,0]((rnd[float32,ne,1.00,-24,0]((rnd32(((-(rnd32((37377847506227999/100000000000000)))) * rnd32(s0))) + rnd32((rnd32((35431102610464501/50000000000000)) * rnd32(s1))))) + rnd32(((-(rnd32((37886044910192999/100000000000000)))) * rnd32(s2))))) + rnd32(((-(rnd32((45413076942315001/100000000000000)))) * rnd32(s3))))) + rnd32((((-(rnd32((21846744026375501/25000000000000)))) * 1) * rnd32(s4))))) + rnd32(((rnd32((35911290954487999/10000000000000)) * 1) * rnd32(s5))))) + rnd32((((-(rnd32((22921226288533999/10000000000000)))) * 1) * rnd32(s6))))) + rnd32((29021426298877441/100000000000000))))
Building Taylor forms...
Simplifying Taylor forms...
success
v0 = (((((((((-((37377847506227999/100000000000000))) * s0) + ((35431102610464501/50000000000000) * s1)) + ((-((37886044910192999/100000000000000))) * s2)) + ((-((45413076942315001/100000000000000))) * s3)) + (((-((21846744026375501/25000000000000))) * 1) * s4)) + (((35911290954487999/10000000000000) * 1) * s5)) + (((-((22921226288533999/10000000000000))) * 1) * s6)) + (29021426298877441/100000000000000))
-1 (76): exp = -24: (5534270939934153/4611686018427387904)
1 (1): exp = -24: ((((((((s0 * (-((221377470976/6103515625)))) + (s1 * (-1853768701952/6103515625))) + (s2 * (-((613037630976/6103515625))))) + (s3 * (-((163930561024/6103515625))))) + (s4 * (1 * (-((1032034052096/6103515625)))))) + (s5 * (1 * (-1125208578048/1220703125)))) + (s6 * (1 * (-((1438917629952/1220703125)))))) + (-94949500416/6103515625))
2 (2): exp = -24: ((-((37377847506227999/100000000000000))) * floor_power2(s0))
3 (4): exp = -24: floor_power2((((-((37377847506227999/100000000000000))) * s0) + interval(-9.99251802635322129275e-05, 9.99251802635322129275e-05)))
4 (7): exp = -24: ((35431102610464501/50000000000000) * floor_power2(s1))
5 (9): exp = -24: floor_power2((((35431102610464501/50000000000000) * s1) + interval(-2.59464717023913816335e-04, 2.59464717023913816335e-04)))
6 (11): exp = -24: floor_power2(((((-((37377847506227999/100000000000000))) * s0) + ((35431102610464501/50000000000000) * s1)) + interval(-5.42495366037446164788e-04, 5.42495366037446164788e-04)))
7 (14): exp = -24: ((-((37886044910192999/100000000000000))) * floor_power2(s2))
8 (16): exp = -24: floor_power2((((-((37886044910192999/100000000000000))) * s2) + interval(-1.20260849455001473957e-04, 1.20260849455001473957e-04)))
9 (18): exp = -24: floor_power2((((((-((37377847506227999/100000000000000))) * s0) + ((35431102610464501/50000000000000) * s1)) + ((-((37886044910192999/100000000000000))) * s2)) + interval(-9.67931996742447692955e-04, 9.67931996742447692955e-04)))
10 (21): exp = -24: ((-((45413076942315001/100000000000000))) * floor_power2(s3))
11 (23): exp = -24: floor_power2((((-((45413076942315001/100000000000000))) * s3) + interval(-2.34156154542694653351e-04, 2.34156154542694653351e-04)))
12 (25): exp = -24: floor_power2(((((((-((37377847506227999/100000000000000))) * s0) + ((35431102610464501/50000000000000) * s1)) + ((-((37886044910192999/100000000000000))) * s2)) + ((-((45413076942315001/100000000000000))) * s3)) + interval(-1.69036940128514307814e-03, 1.69036940128514307814e-03)))
13 (29): exp = -24: (((-((21846744026375501/25000000000000))) * 1) * floor_power2(s4))
14 (31): exp = -24: floor_power2(((((-((21846744026375501/25000000000000))) * 1) * s4) + interval(-5.27556611246902799374e-04, 5.27556611246902799374e-04)))
15 (33): exp = -24: floor_power2((((((((-((37377847506227999/100000000000000))) * s0) + ((35431102610464501/50000000000000) * s1)) + ((-((37886044910192999/100000000000000))) * s2)) + ((-((45413076942315001/100000000000000))) * s3)) + (((-((21846744026375501/25000000000000))) * 1) * s4)) + interval(-3.19448851253204772066e-03, 3.19448851253204772066e-03)))
16 (37): exp = -24: (((35911290954487999/10000000000000) * 1) * floor_power2(s5))
17 (39): exp = -24: floor_power2(((((35911290954487999/10000000000000) * 1) * s5) + interval(-2.31674389491266872337e-03, 2.31674389491266872337e-03)))
18 (41): exp = -24: floor_power2(((((((((-((37377847506227999/100000000000000))) * s0) + ((35431102610464501/50000000000000) * s1)) + ((-((37886044910192999/100000000000000))) * s2)) + ((-((45413076942315001/100000000000000))) * s3)) + (((-((21846744026375501/25000000000000))) * 1) * s4)) + (((35911290954487999/10000000000000) * 1) * s5)) + interval(-8.44091990744472511765e-03, 8.44091990744472511765e-03)))
19 (45): exp = -24: (((-((22921226288533999/10000000000000))) * 1) * floor_power2(s6))
20 (47): exp = -24: floor_power2(((((-((22921226288533999/10000000000000))) * 1) * s6) + interval(-1.86582542299794373886e-03, 1.86582542299794373886e-03)))
21 (49): exp = -24: floor_power2((((((((((-((37377847506227999/100000000000000))) * s0) + ((35431102610464501/50000000000000) * s1)) + ((-((37886044910192999/100000000000000))) * s2)) + ((-((45413076942315001/100000000000000))) * s3)) + (((-((21846744026375501/25000000000000))) * 1) * s4)) + (((35911290954487999/10000000000000) * 1) * s5)) + (((-((22921226288533999/10000000000000))) * 1) * s6)) + interval(-1.32364328304426775301e-02, 1.32364328304426775301e-02)))
22 (52): exp = -24: floor_power2(((((((((((-((37377847506227999/100000000000000))) * s0) + ((35431102610464501/50000000000000) * s1)) + ((-((37886044910192999/100000000000000))) * s2)) + ((-((45413076942315001/100000000000000))) * s3)) + (((-((21846744026375501/25000000000000))) * 1) * s4)) + (((35911290954487999/10000000000000) * 1) * s5)) + (((-((22921226288533999/10000000000000))) * 1) * s6)) + (29021426298877441/100000000000000)) + interval(-1.71436100716576798886e-02, 1.71436100716576798886e-02)))

Corresponding original subexpressions:
1: rnd32(0)
2: rnd32(s0)
3: rnd32(((-(rnd32((37377847506227999/100000000000000)))) * rnd32(s0)))
4: rnd32(s1)
5: rnd32((rnd32((35431102610464501/50000000000000)) * rnd32(s1)))
6: rnd[float32,ne,1.00,-24,0]((rnd32(((-(rnd32((37377847506227999/100000000000000)))) * rnd32(s0))) + rnd32((rnd32((35431102610464501/50000000000000)) * rnd32(s1)))))
7: rnd32(s2)
8: rnd32(((-(rnd32((37886044910192999/100000000000000)))) * rnd32(s2)))
9: rnd[float32,ne,1.00,-24,0]((rnd[float32,ne,1.00,-24,0]((rnd32(((-(rnd32((37377847506227999/100000000000000)))) * rnd32(s0))) + rnd32((rnd32((35431102610464501/50000000000000)) * rnd32(s1))))) + rnd32(((-(rnd32((37886044910192999/100000000000000)))) * rnd32(s2)))))
10: rnd32(s3)
11: rnd32(((-(rnd32((45413076942315001/100000000000000)))) * rnd32(s3)))
12: rnd[float32,ne,1.00,-24,0]((rnd[float32,ne,1.00,-24,0]((rnd[float32,ne,1.00,-24,0]((rnd32(((-(rnd32((37377847506227999/100000000000000)))) * rnd32(s0))) + rnd32((rnd32((35431102610464501/50000000000000)) * rnd32(s1))))) + rnd32(((-(rnd32((37886044910192999/100000000000000)))) * rnd32(s2))))) + rnd32(((-(rnd32((45413076942315001/100000000000000)))) * rnd32(s3)))))
13: rnd32(s4)
14: rnd32((((-(rnd32((21846744026375501/25000000000000)))) * 1) * rnd32(s4)))
15: rnd[float32,ne,1.00,-24,0]((rnd[float32,ne,1.00,-24,0]((rnd[float32,ne,1.00,-24,0]((rnd[float32,ne,1.00,-24,0]((rnd32(((-(rnd32((37377847506227999/100000000000000)))) * rnd32(s0))) + rnd32((rnd32((35431102610464501/50000000000000)) * rnd32(s1))))) + rnd32(((-(rnd32((37886044910192999/100000000000000)))) * rnd32(s2))))) + rnd32(((-(rnd32((45413076942315001/100000000000000)))) * rnd32(s3))))) + rnd32((((-(rnd32((21846744026375501/25000000000000)))) * 1) * rnd32(s4)))))
16: rnd32(s5)
17: rnd32(((rnd32((35911290954487999/10000000000000)) * 1) * rnd32(s5)))
18: rnd[float32,ne,1.00,-24,0]((rnd[float32,ne,1.00,-24,0]((rnd[float32,ne,1.00,-24,0]((rnd[float32,ne,1.00,-24,0]((rnd[float32,ne,1.00,-24,0]((rnd32(((-(rnd32((37377847506227999/100000000000000)))) * rnd32(s0))) + rnd32((rnd32((35431102610464501/50000000000000)) * rnd32(s1))))) + rnd32(((-(rnd32((37886044910192999/100000000000000)))) * rnd32(s2))))) + rnd32(((-(rnd32((45413076942315001/100000000000000)))) * rnd32(s3))))) + rnd32((((-(rnd32((21846744026375501/25000000000000)))) * 1) * rnd32(s4))))) + rnd32(((rnd32((35911290954487999/10000000000000)) * 1) * rnd32(s5)))))
19: rnd32(s6)
20: rnd32((((-(rnd32((22921226288533999/10000000000000)))) * 1) * rnd32(s6)))
21: rnd[float32,ne,1.00,-24,0]((rnd[float32,ne,1.00,-24,0]((rnd[float32,ne,1.00,-24,0]((rnd[float32,ne,1.00,-24,0]((rnd[float32,ne,1.00,-24,0]((rnd[float32,ne,1.00,-24,0]((rnd32(((-(rnd32((37377847506227999/100000000000000)))) * rnd32(s0))) + rnd32((rnd32((35431102610464501/50000000000000)) * rnd32(s1))))) + rnd32(((-(rnd32((37886044910192999/100000000000000)))) * rnd32(s2))))) + rnd32(((-(rnd32((45413076942315001/100000000000000)))) * rnd32(s3))))) + rnd32((((-(rnd32((21846744026375501/25000000000000)))) * 1) * rnd32(s4))))) + rnd32(((rnd32((35911290954487999/10000000000000)) * 1) * rnd32(s5))))) + rnd32((((-(rnd32((22921226288533999/10000000000000)))) * 1) * rnd32(s6)))))
22: rnd[float32,ne,1.00,-24,0]((rnd[float32,ne,1.00,-24,0]((rnd[float32,ne,1.00,-24,0]((rnd[float32,ne,1.00,-24,0]((rnd[float32,ne,1.00,-24,0]((rnd[float32,ne,1.00,-24,0]((rnd[float32,ne,1.00,-24,0]((rnd32(((-(rnd32((37377847506227999/100000000000000)))) * rnd32(s0))) + rnd32((rnd32((35431102610464501/50000000000000)) * rnd32(s1))))) + rnd32(((-(rnd32((37886044910192999/100000000000000)))) * rnd32(s2))))) + rnd32(((-(rnd32((45413076942315001/100000000000000)))) * rnd32(s3))))) + rnd32((((-(rnd32((21846744026375501/25000000000000)))) * 1) * rnd32(s4))))) + rnd32(((rnd32((35911290954487999/10000000000000)) * 1) * rnd32(s5))))) + rnd32((((-(rnd32((22921226288533999/10000000000000)))) * 1) * rnd32(s6))))) + rnd32((29021426298877441/100000000000000))))

bounds: [-6.696698e+04, 6.731440e+04]

Computing absolute errors
-1: exp = -24: 1.200054e-03 (low = 1.200054e-03, subopt = 0.0%)

Solving the exact optimization problem
exact bound (exp = -24): 3.012496e+05 (low = 3.011998e+05, subopt = 0.0%)
total2: 7.152878e-11 (low = 7.152878e-11, subopt = 0.0%)
exact total: 1.795588e-02 (low = 1.795291e-02, subopt = 0.0%)

Computing relative errors
**WARNING**: 
Cannot compute the relative error: values of the function are close to zero

**WARNING**: 0.00000000000000000000000000000000000000000000000000100000000000000000761622370578234285759930916419271389895138472837095389481447900651438935953211746691245522253373491061798089161657965284746296674711629748344421386718750000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000

Elapsed time: 2.11174
*************************************

-------------------------------------------------------------------------------
Problem: traincars3

Optimization lower bounds for error models:
The absolute error model (exact): 1.795291e-02 (suboptimality = 0.0%)

Bounds (without rounding): [-6.696698e+04, 6.731440e+04]
Bounds (floating-point): [-6.69669937956783542177e+04, 6.73144182583322253777e+04]

Absolute error (exact): 1.795588e-02

Elapsed time: 2.11


