Loading configuration file: /home/roki/GIT/FPTaylor/./default.cfg
FPTaylor, version 0.9.3+dev

Loading: /home/roki/GIT/FPTaylor/benchmarks/probability/Traincars4.txt
Processing: traincars4

*************************************
Taylor form for: rnd32((rnd32((rnd32((rnd32((rnd32((rnd32((rnd32((rnd32((rnd32((rnd32((rnd32((-(rnd32(1201)))) * rnd32(s0))) + rnd32((rnd32((-(rnd32(4876)))) * rnd32(s1))))) + rnd32((rnd32((6707999999999999/500000000000)) * rnd32(s2))))) + rnd32((rnd32((-(rnd32(10484)))) * rnd32(s3))))) + rnd32((rnd32((-(rnd32(774)))) * rnd32(s4))))) + rnd32((rnd32((-(rnd32((6810000000000001/500000000000))))) * rnd32(s5))))) + rnd32((rnd32(10481) * rnd32(s6))))) + rnd32((rnd32(20425) * rnd32(s7))))) + rnd32((rnd32((-(rnd32(17815)))) * rnd32(s8))))) + rnd32((10424218899328911/2000000000000))))

Conservative bound: [-584294.680849, 569108.864612]

Simplified rounding: rnd[float32,ne,1.00,-24,0]((rnd[float32,ne,1.00,-24,0]((rnd[float32,ne,1.00,-24,0]((rnd[float32,ne,1.00,-24,0]((rnd[float32,ne,1.00,-24,0]((rnd[float32,ne,1.00,-24,0]((rnd[float32,ne,1.00,-24,0]((rnd[float32,ne,1.00,-24,0]((rnd[float32,ne,1.00,-24,0]((rnd32(((-(1201)) * rnd32(s0))) + rnd32(((-(4876)) * rnd32(s1))))) + rnd32((rnd32((6707999999999999/500000000000)) * rnd32(s2))))) + rnd32(((-(10484)) * rnd32(s3))))) + rnd32(((-(774)) * rnd32(s4))))) + rnd32(((-(rnd32((6810000000000001/500000000000)))) * rnd32(s5))))) + rnd32((10481 * rnd32(s6))))) + rnd32((20425 * rnd32(s7))))) + rnd32(((-(17815)) * rnd32(s8))))) + rnd32((10424218899328911/2000000000000))))
Building Taylor forms...
Simplifying Taylor forms...
success
v0 = (((((((((((-(1201)) * s0) + ((-(4876)) * s1)) + ((6707999999999999/500000000000) * s2)) + ((-(10484)) * s3)) + ((-(774)) * s4)) + ((-((6810000000000001/500000000000))) * s5)) + (10481 * s6)) + (20425 * s7)) + ((-(17815)) * s8)) + (10424218899328911/2000000000000))
-1 (83): exp = -24: (7427640235712289/309485009821345068724781056)
1 (1): exp = -24: ((-(1201)) * floor_power2(s0))
2 (3): exp = -24: floor_power2((((-(1201)) * s0) + interval(-2.86340713500976562500e-04, 2.86340713500976562500e-04)))
3 (5): exp = -24: ((-(4876)) * floor_power2(s1))
4 (7): exp = -24: floor_power2((((-(4876)) * s1) + interval(-1.16252899169921875000e-03, 1.16252899169921875000e-03)))
5 (9): exp = -24: floor_power2(((((-(1201)) * s0) + ((-(4876)) * s1)) + interval(-2.66957283020019617986e-03, 2.66957283020019617986e-03)))
6 (11): exp = -24: (((s2 * (-8192/244140625)) + (s5 * (-((8192/244140625))))) + (305825609728/244140625))
7 (12): exp = -24: ((6707999999999999/500000000000) * floor_power2(s2))
8 (14): exp = -24: floor_power2((((6707999999999999/500000000000) * s2) + interval(-3.19862367022656288174e-03, 3.19862367022656288174e-03)))
9 (16): exp = -24: floor_power2((((((-(1201)) * s0) + ((-(4876)) * s1)) + ((6707999999999999/500000000000) * s2)) + interval(-1.17275715004267616637e-02, 1.17275715004267616637e-02)))
10 (18): exp = -24: ((-(10484)) * floor_power2(s3))
11 (20): exp = -24: floor_power2((((-(10484)) * s3) + interval(-2.49958038330078125000e-03, 2.49958038330078125000e-03)))
12 (22): exp = -24: floor_power2(((((((-(1201)) * s0) + ((-(4876)) * s1)) + ((6707999999999999/500000000000) * s2)) + ((-(10484)) * s3)) + interval(-2.20396518837275498526e-02, 2.20396518837275498526e-02)))
13 (24): exp = -24: ((-(774)) * floor_power2(s4))
14 (26): exp = -24: floor_power2((((-(774)) * s4) + interval(-3.69071960449218750000e-04, 3.69071960449218750000e-04)))
15 (28): exp = -24: floor_power2((((((((-(1201)) * s0) + ((-(4876)) * s1)) + ((6707999999999999/500000000000) * s2)) + ((-(10484)) * s3)) + ((-(774)) * s4)) + interval(-3.07095050941767686026e-02, 3.07095050941767686026e-02)))
16 (31): exp = -24: ((-((6810000000000001/500000000000))) * floor_power2(s5))
17 (33): exp = -24: floor_power2((((-((6810000000000001/500000000000))) * s5) + interval(-6.49452211872656587355e-03, 6.49452211872656587355e-03)))
18 (35): exp = -24: floor_power2(((((((((-(1201)) * s0) + ((-(4876)) * s1)) + ((6707999999999999/500000000000) * s2)) + ((-(10484)) * s3)) + ((-(774)) * s4)) + ((-((6810000000000001/500000000000))) * s5)) + interval(-5.28290272129033414150e-02, 5.28290272129033414150e-02)))
19 (37): exp = -24: (10481 * floor_power2(s6))
20 (39): exp = -24: floor_power2(((10481 * s6) + interval(-4.99773025512695312500e-03, 4.99773025512695312500e-03)))
21 (41): exp = -24: floor_power2((((((((((-(1201)) * s0) + ((-(4876)) * s1)) + ((6707999999999999/500000000000) * s2)) + ((-(10484)) * s3)) + ((-(774)) * s4)) + ((-((6810000000000001/500000000000))) * s5)) + (10481 * s6)) + interval(-7.73580074680303153567e-02, 7.73580074680303153567e-02)))
22 (43): exp = -24: (20425 * floor_power2(s7))
23 (45): exp = -24: floor_power2(((20425 * s7) + interval(-9.73939895629882812500e-03, 9.73939895629882812500e-03)))
24 (47): exp = -24: floor_power2(((((((((((-(1201)) * s0) + ((-(4876)) * s1)) + ((6707999999999999/500000000000) * s2)) + ((-(10484)) * s3)) + ((-(774)) * s4)) + ((-((6810000000000001/500000000000))) * s5)) + (10481 * s6)) + (20425 * s7)) + interval(-1.10534906424329171237e-01, 1.10534906424329171237e-01)))
25 (49): exp = -24: ((-(17815)) * floor_power2(s8))
26 (51): exp = -24: floor_power2((((-(17815)) * s8) + interval(-8.49485397338867187500e-03, 8.49485397338867187500e-03)))
27 (53): exp = -24: floor_power2((((((((((((-(1201)) * s0) + ((-(4876)) * s1)) + ((6707999999999999/500000000000) * s2)) + ((-(10484)) * s3)) + ((-(774)) * s4)) + ((-((6810000000000001/500000000000))) * s5)) + (10481 * s6)) + (20425 * s7)) + ((-(17815)) * s8)) + interval(-1.58092260397717898623e-01, 1.58092260397717898623e-01)))
28 (56): exp = -24: floor_power2(((((((((((((-(1201)) * s0) + ((-(4876)) * s1)) + ((6707999999999999/500000000000) * s2)) + ((-(10484)) * s3)) + ((-(774)) * s4)) + ((-((6810000000000001/500000000000))) * s5)) + (10481 * s6)) + (20425 * s7)) + ((-(17815)) * s8)) + (10424218899328911/2000000000000)) + interval(-1.89416924853217899516e-01, 1.89416924853217899516e-01)))

Corresponding original subexpressions:
1: rnd32(s0)
2: rnd32(((-(1201)) * rnd32(s0)))
3: rnd32(s1)
4: rnd32(((-(4876)) * rnd32(s1)))
5: rnd[float32,ne,1.00,-24,0]((rnd32(((-(1201)) * rnd32(s0))) + rnd32(((-(4876)) * rnd32(s1)))))
6: rnd32(0)
7: rnd32(s2)
8: rnd32((rnd32((6707999999999999/500000000000)) * rnd32(s2)))
9: rnd[float32,ne,1.00,-24,0]((rnd[float32,ne,1.00,-24,0]((rnd32(((-(1201)) * rnd32(s0))) + rnd32(((-(4876)) * rnd32(s1))))) + rnd32((rnd32((6707999999999999/500000000000)) * rnd32(s2)))))
10: rnd32(s3)
11: rnd32(((-(10484)) * rnd32(s3)))
12: rnd[float32,ne,1.00,-24,0]((rnd[float32,ne,1.00,-24,0]((rnd[float32,ne,1.00,-24,0]((rnd32(((-(1201)) * rnd32(s0))) + rnd32(((-(4876)) * rnd32(s1))))) + rnd32((rnd32((6707999999999999/500000000000)) * rnd32(s2))))) + rnd32(((-(10484)) * rnd32(s3)))))
13: rnd32(s4)
14: rnd32(((-(774)) * rnd32(s4)))
15: rnd[float32,ne,1.00,-24,0]((rnd[float32,ne,1.00,-24,0]((rnd[float32,ne,1.00,-24,0]((rnd[float32,ne,1.00,-24,0]((rnd32(((-(1201)) * rnd32(s0))) + rnd32(((-(4876)) * rnd32(s1))))) + rnd32((rnd32((6707999999999999/500000000000)) * rnd32(s2))))) + rnd32(((-(10484)) * rnd32(s3))))) + rnd32(((-(774)) * rnd32(s4)))))
16: rnd32(s5)
17: rnd32(((-(rnd32((6810000000000001/500000000000)))) * rnd32(s5)))
18: rnd[float32,ne,1.00,-24,0]((rnd[float32,ne,1.00,-24,0]((rnd[float32,ne,1.00,-24,0]((rnd[float32,ne,1.00,-24,0]((rnd[float32,ne,1.00,-24,0]((rnd32(((-(1201)) * rnd32(s0))) + rnd32(((-(4876)) * rnd32(s1))))) + rnd32((rnd32((6707999999999999/500000000000)) * rnd32(s2))))) + rnd32(((-(10484)) * rnd32(s3))))) + rnd32(((-(774)) * rnd32(s4))))) + rnd32(((-(rnd32((6810000000000001/500000000000)))) * rnd32(s5)))))
19: rnd32(s6)
20: rnd32((10481 * rnd32(s6)))
21: rnd[float32,ne,1.00,-24,0]((rnd[float32,ne,1.00,-24,0]((rnd[float32,ne,1.00,-24,0]((rnd[float32,ne,1.00,-24,0]((rnd[float32,ne,1.00,-24,0]((rnd[float32,ne,1.00,-24,0]((rnd32(((-(1201)) * rnd32(s0))) + rnd32(((-(4876)) * rnd32(s1))))) + rnd32((rnd32((6707999999999999/500000000000)) * rnd32(s2))))) + rnd32(((-(10484)) * rnd32(s3))))) + rnd32(((-(774)) * rnd32(s4))))) + rnd32(((-(rnd32((6810000000000001/500000000000)))) * rnd32(s5))))) + rnd32((10481 * rnd32(s6)))))
22: rnd32(s7)
23: rnd32((20425 * rnd32(s7)))
24: rnd[float32,ne,1.00,-24,0]((rnd[float32,ne,1.00,-24,0]((rnd[float32,ne,1.00,-24,0]((rnd[float32,ne,1.00,-24,0]((rnd[float32,ne,1.00,-24,0]((rnd[float32,ne,1.00,-24,0]((rnd[float32,ne,1.00,-24,0]((rnd32(((-(1201)) * rnd32(s0))) + rnd32(((-(4876)) * rnd32(s1))))) + rnd32((rnd32((6707999999999999/500000000000)) * rnd32(s2))))) + rnd32(((-(10484)) * rnd32(s3))))) + rnd32(((-(774)) * rnd32(s4))))) + rnd32(((-(rnd32((6810000000000001/500000000000)))) * rnd32(s5))))) + rnd32((10481 * rnd32(s6))))) + rnd32((20425 * rnd32(s7)))))
25: rnd32(s8)
26: rnd32(((-(17815)) * rnd32(s8)))
27: rnd[float32,ne,1.00,-24,0]((rnd[float32,ne,1.00,-24,0]((rnd[float32,ne,1.00,-24,0]((rnd[float32,ne,1.00,-24,0]((rnd[float32,ne,1.00,-24,0]((rnd[float32,ne,1.00,-24,0]((rnd[float32,ne,1.00,-24,0]((rnd[float32,ne,1.00,-24,0]((rnd32(((-(1201)) * rnd32(s0))) + rnd32(((-(4876)) * rnd32(s1))))) + rnd32((rnd32((6707999999999999/500000000000)) * rnd32(s2))))) + rnd32(((-(10484)) * rnd32(s3))))) + rnd32(((-(774)) * rnd32(s4))))) + rnd32(((-(rnd32((6810000000000001/500000000000)))) * rnd32(s5))))) + rnd32((10481 * rnd32(s6))))) + rnd32((20425 * rnd32(s7))))) + rnd32(((-(17815)) * rnd32(s8)))))
28: rnd[float32,ne,1.00,-24,0]((rnd[float32,ne,1.00,-24,0]((rnd[float32,ne,1.00,-24,0]((rnd[float32,ne,1.00,-24,0]((rnd[float32,ne,1.00,-24,0]((rnd[float32,ne,1.00,-24,0]((rnd[float32,ne,1.00,-24,0]((rnd[float32,ne,1.00,-24,0]((rnd[float32,ne,1.00,-24,0]((rnd32(((-(1201)) * rnd32(s0))) + rnd32(((-(4876)) * rnd32(s1))))) + rnd32((rnd32((6707999999999999/500000000000)) * rnd32(s2))))) + rnd32(((-(10484)) * rnd32(s3))))) + rnd32(((-(774)) * rnd32(s4))))) + rnd32(((-(rnd32((6810000000000001/500000000000)))) * rnd32(s5))))) + rnd32((10481 * rnd32(s6))))) + rnd32((20425 * rnd32(s7))))) + rnd32(((-(17815)) * rnd32(s8))))) + rnd32((10424218899328911/2000000000000))))

bounds: [-5.842944e+05, 5.691086e+05]

Computing absolute errors
-1: exp = -24: 2.400000e-11 (low = 2.400000e-11, subopt = 0.0%)

Solving the exact optimization problem
exact bound (exp = -24): 3.043500e+06 (low = 3.027116e+06, subopt = 0.5%)
total2: 1.430511e-18 (low = 1.430511e-18, subopt = 0.0%)
exact total: 1.814067e-01 (low = 1.804302e-01, subopt = 0.5%)

Computing relative errors
**WARNING**: 
Cannot compute the relative error: values of the function are close to zero
**WARNING**: 0.0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
**WARNING**: 0.00000000000000000000000000000000000000000000000000100000000000000000761622370578234285759930916419271389895138472837095389481447900651438935953211746691245522253373491061798089161657965284746296674711629748344421386718750000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000

Elapsed time: 42.85641
*************************************

-------------------------------------------------------------------------------
Problem: traincars4

Optimization lower bounds for error models:
The absolute error model (exact): 1.804302e-01 (suboptimality = 0.5%)

Bounds (without rounding): [-5.842944e+05, 5.691086e+05]
Bounds (floating-point): [-5.84294571957051986828e+05, 5.69108790856380830519e+05]

Absolute error (exact): 1.814067e-01

Elapsed time: 42.86


