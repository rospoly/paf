Loading configuration file: /home/roki/GIT/FPTaylor/./default.cfg
FPTaylor, version 0.9.3+dev

Loading: /home/roki/GIT/FPTaylor/benchmarks/probability/Turbine2.txt
Processing: turbine2

*************************************
Taylor form for: rnd32((rnd32((rnd32((rnd32(6) * rnd32(v))) - rnd32((rnd32((rnd32((rnd32((rnd32((rnd32((rnd32((1/2)) * rnd32(v))) * rnd32(w))) * rnd32(w))) * rnd32(r))) * rnd32(r))) / rnd32((rnd32(1) - rnd32(v))))))) - rnd32((5/2))))

Conservative bound: [-29.436997, 80.993081]

Simplified rounding: rnd[float32,ne,1.00,-24,0]((rnd[float32,ne,1.00,-24,0]((rnd32((6 * rnd32(v))) - rnd32((rnd32((rnd32((rnd32((rnd32((rnd[float32,ne,1.00,0,-150](((1/2) * rnd32(v))) * rnd32(w))) * rnd32(w))) * rnd32(r))) * rnd32(r))) / rnd[float32,ne,1.00,-24,0]((1 - rnd32(v))))))) - (5/2)))
Building Taylor forms...
Simplifying Taylor forms...
success
v0 = (((6 * v) - (((((((1/2) * v) * w) * w) * r) * r) * (1 / (1 - v)))) - (5/2))
-1 (51): exp = -24: (7407023287787155/18446744073709551616)
1 (1): exp = -24: (((6 * floor_power2(v)) + (-((((((((1/2) * v) * w) * w) * r) * r) * (-(((-(floor_power2(v))) / ((1 - v) * (1 - v))))))))) + (-(((1 / (1 - v)) * (r * (r * (w * (w * ((1/2) * floor_power2(v))))))))))
2 (3): exp = -24: floor_power2(((6 * v) + interval(-1.43051147460937500000e-06, 1.43051147460937500000e-06)))
3 (12): exp = -24: ((-(((1 / (1 - v)) * (r * (r * ((((1/2) * v) * w) * floor_power2(w))))))) + (-(((1 / (1 - v)) * (r * (r * (w * (((1/2) * v) * floor_power2(w)))))))))
4 (10): exp = -24: (-(((1 / (1 - v)) * (r * (r * (w * floor_power2(((((1/2) * v) * w) + interval(-1.74343589520731272807e-07, 1.74343589520731272807e-07)))))))))
5 (14): exp = -24: (-(((1 / (1 - v)) * (r * (r * floor_power2((((((1/2) * v) * w) * w) + interval(-3.24547302748001863263e-07, 3.24547302748001863263e-07))))))))
6 (20): exp = -24: ((-(((1 / (1 - v)) * ((((((1/2) * v) * w) * w) * r) * floor_power2(r))))) + (-(((1 / (1 - v)) * (r * (((((1/2) * v) * w) * w) * floor_power2(r)))))))
7 (18): exp = -24: (-(((1 / (1 - v)) * (r * floor_power2(((((((1/2) * v) * w) * w) * r) + interval(-3.43090314268402168100e-06, 3.43090314268402168100e-06)))))))
8 (22): exp = -24: (-(((1 / (1 - v)) * floor_power2((((((((1/2) * v) * w) * w) * r) * r) + interval(-3.38696145898159057326e-05, 3.38696145898159057326e-05))))))
9 (25): exp = -24: (-((((((((1/2) * v) * w) * w) * r) * r) * (-((floor_power2(((1 - v) + interval(-2.38418579101562500000e-07, 2.38418579101562500000e-07))) / ((1 - v) * (1 - v))))))))
10 (29): exp = -24: (-(floor_power2(((((((((1/2) * v) * w) * w) * r) * r) * (1 / (1 - v))) + interval(-6.02732402543012732443e-05, 6.02732402543012732443e-05)))))
11 (31): exp = -24: floor_power2((((6 * v) - (((((((1/2) * v) * w) * w) * r) * r) * (1 / (1 - v)))) + interval(-6.64721233109419117968e-05, 6.64721233109419117968e-05)))
12 (33): exp = -24: floor_power2(((((6 * v) - (((((((1/2) * v) * w) * w) * r) * r) * (1 / (1 - v)))) - (5/2)) + interval(-7.02868205765669117968e-05, 7.02868205765669117968e-05)))

Corresponding original subexpressions:
1: rnd32(v)
2: rnd32((6 * rnd32(v)))
3: rnd32(w)
4: rnd32((rnd[float32,ne,1.00,0,-150](((1/2) * rnd32(v))) * rnd32(w)))
5: rnd32((rnd32((rnd[float32,ne,1.00,0,-150](((1/2) * rnd32(v))) * rnd32(w))) * rnd32(w)))
6: rnd32(r)
7: rnd32((rnd32((rnd32((rnd[float32,ne,1.00,0,-150](((1/2) * rnd32(v))) * rnd32(w))) * rnd32(w))) * rnd32(r)))
8: rnd32((rnd32((rnd32((rnd32((rnd[float32,ne,1.00,0,-150](((1/2) * rnd32(v))) * rnd32(w))) * rnd32(w))) * rnd32(r))) * rnd32(r)))
9: rnd[float32,ne,1.00,-24,0]((1 - rnd32(v)))
10: rnd32((rnd32((rnd32((rnd32((rnd32((rnd[float32,ne,1.00,0,-150](((1/2) * rnd32(v))) * rnd32(w))) * rnd32(w))) * rnd32(r))) * rnd32(r))) / rnd[float32,ne,1.00,-24,0]((1 - rnd32(v)))))
11: rnd[float32,ne,1.00,-24,0]((rnd32((6 * rnd32(v))) - rnd32((rnd32((rnd32((rnd32((rnd32((rnd[float32,ne,1.00,0,-150](((1/2) * rnd32(v))) * rnd32(w))) * rnd32(w))) * rnd32(r))) * rnd32(r))) / rnd[float32,ne,1.00,-24,0]((1 - rnd32(v)))))))
12: rnd[float32,ne,1.00,-24,0]((rnd[float32,ne,1.00,-24,0]((rnd32((6 * rnd32(v))) - rnd32((rnd32((rnd32((rnd32((rnd32((rnd[float32,ne,1.00,0,-150](((1/2) * rnd32(v))) * rnd32(w))) * rnd32(w))) * rnd32(r))) * rnd32(r))) / rnd[float32,ne,1.00,-24,0]((1 - rnd32(v))))))) - (5/2)))

bounds: [-2.877537e+01, 3.922113e+00]

Computing absolute errors
-1: exp = -24: 4.015355e-04 (low = 4.015355e-04, subopt = 0.0%)

Solving the exact optimization problem
exact bound (exp = -24): 1.783185e+02 (low = 1.768803e+02, subopt = 0.8%)
total2: 2.393338e-11 (low = 2.393338e-11, subopt = 0.0%)
exact total: 1.062864e-05 (low = 1.054291e-05, subopt = 0.8%)

Computing relative errors
**WARNING**: 
Cannot compute the relative error: values of the function are close to zero

**WARNING**: 0.00000000000000000000000000000000000000000000000000100000000000000000761622370578234285759930916419271389895138472837095389481447900651438935953211746691245522253373491061798089161657965284746296674711629748344421386718750000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000

Elapsed time: 0.46162
*************************************

-------------------------------------------------------------------------------
Problem: turbine2

Optimization lower bounds for error models:
The absolute error model (exact): 1.054291e-05 (suboptimality = 0.8%)

Bounds (without rounding): [-2.877537e+01, 3.922113e+00]
Bounds (floating-point): [-2.87753851740906156920e+01, 3.92212372755415694670e+00]

Absolute error (exact): 1.062864e-05

Elapsed time: 0.46


